In this article we present an I/O-efficient algorithm for the batched (off-line) version of the union-find problem. Given any sequence ofNunion and find operations, where each union operation joins two distinct sets, our algorithm usesO(SORT(N)) &equals;O(&frac;NBlogM/B&frac;NB) I/Os, whereMis the memory size andBis the disk block size. This bound is asymptotically optimal in the worst case. If there are union operations that join a set with itself, our algorithm usesO(SORT(N) + MST(N)) I/Os, where MST(N) is the number of I/Os needed to compute the minimum spanning tree of a graph withNedges. We also describe a simple and practicalO(SORT(N) log(&frac;NM))-I/O algorithm for this problem, which we have implemented.We are interested in the union-find problem because of its applications in terrain analysis. A terrain can be abstracted as a height function defined over R2, and many problems that deal with such functions require a union-find data structure. With the emergence of modern mapping technologies, huge amount of elevation data is being generated that is too large to fit in memory, thus I/O-efficient algorithms are needed to process this data efficiently. In this article, we study two terrain-analysis problems that benefit from a union-find data structure: (i) computing topological persistence and (ii) constructing the contour tree. We give the firstO(SORT(N))-I/O algorithms for these two problems, assuming that the input terrain is represented as a triangular mesh withNvertices.