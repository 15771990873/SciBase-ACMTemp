LetTbe a string withncharacters over an alphabet of constant size. A recent breakthrough on compressed indexing allows us to build an index forTin optimal space (i.e.,O(n) bits), while supporting very efficient pattern matching [Ferragina and Manzini 2000; Grossi and Vitter 2000]. Yet the compressed nature of such indexes also makes them difficult to update dynamically.This article extends the work on optimal-space indexing to a dynamic collection of texts. Our first result is a compressed solution to thelibrary managementproblem, where we show an index ofO(n) bits for a text collectionLof total lengthn, which can be updated inO(&verbar;T&verbar; logn) time when a textTis inserted or deleted fromL; also, the index supports searching the occurrences of any patternPin all texts inLinO(&verbar;P&verbar; logn&plus;occlog2n) time, whereoccis the number of occurrences.Our second result is a compressed solution to thedictionary matchingproblem, where we show an index ofO(d) bits for a pattern collectionDof total lengthd, which can be updated inO(&verbar;P&verbar; log2d) time when a patternPis inserted or deleted fromD; also, the index supports searching the occurrences of all patterns ofDin any textTinO((&verbar;T&verbar; &plus;occ)log2d) time. When compared with theO(dlogd)-bit suffix-tree-based solution of Amir et al. [1995], the compact solution increases the query time by roughly a factor of logdonly.The solution to the dictionary matching problem is based on a new compressed representation of a suffix tree. Precisely, we give anO(n)-bit representation of a suffix tree for a dynamic collection of texts whose total length isn, which supports insertion and deletion of a textTinO(&verbar;T&verbar; log2n) time, as well as all suffix tree traversal operations, including forward and backward suffix links. This work can be regarded as a generalization of the compressed representation of static texts. In the study of the aforementioned result, we also derive the firstO(n)-bit representation for maintainingnpairs of balanced parentheses inO(logn/log logn) time per operation, matching the time complexity of the previousO(nlogn)-bit solution.