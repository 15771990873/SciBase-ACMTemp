A union-find data structure maintains a collection of disjoint sets under the operations makeset, union, and find. Kaplan, Shafrir, and Tarjan [SODA 2002] designed data structures for an extension of the union-find problem in which items of the sets maintained may be deleted. The cost of a delete operation in their implementations is essentially the same as the cost of a find operation; namely,O(logn) worst-case andO(α⌈M/N⌉(n)) amortized, wherenis the number of items in the set returned by the find operation,Nis the total number of makeset operations performed,Mis the total number of find operations performed, and α⌈M/N⌉(n) is a functional inverse of Ackermann’s function. They left open the question whether delete operations can be implemented more efficiently than find operations, for example, ino(logn) worst-case time. We resolve this open problem by presenting a relatively simple modification of the classical union-find data structure that supports delete, as well as makeset and union operations, inconstantworst-case time, while still supporting find operations inO(logn) worst-case time andO(α⌈ M/N⌉(n)) amortized time.Our analysis supplies, in particular, a very concise potential-based amortized analysis of the standard union-find data structure that yields anO(α⌈M/N⌉(n)) amortized bound on the cost of find operations. All previous potential-based analyses yielded the weaker amortized bound ofO(α⌈M/N⌉(N)). Furthermore, our tighter analysis extends to one-path variants of the path compression technique such aspath splitting.