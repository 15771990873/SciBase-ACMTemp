Let (G&equals; (V(G),E(G))) be a directed graph with nonnegative edge lengths and letPbe a shortest path fromstotinG. In thereplacement pathsproblem we are required to compute for every edgeeinP, the length of a shortest path fromstotthat avoidse. The fastest known algorithm for solving the problem in weighted directed graphs is the trivial one: each edge inPis removed from the graph in its turn and the distance fromstotin the modified graph is computed. The running time of this algorithm isO(m n+n2logn), wheren&equals; &vert;V(G)&vert; andm&equals; &vert;E(G)&vert;.The replacement paths problem is strongly motivated by two different applications. First, the fastest algorithm to compute thek simple shortest pathsfromstotin directed graphs [Yen 1971; Lawler 1972] repeatedly computes the replacement paths fromstot. Its running time isO(kn(m+nlogn)). Second, the computation ofVickrey pricingof edges in distributed networks can be reduced to the replacement paths problem. An open question raised by Nisan and Ronen [2001] asks whether it is possible to compute the Vickrey pricing faster than the trivial algorithm described in the previous paragraph.In this article we present a near-linear time algorithm for computing replacement paths in weightedplanardirected graphs. In particular, the algorithm computes the lengths of the replacement paths inO(nlog3n) time (recall that in planar graphsm&equals;O(n)). This result immediately improves the running time of the two applications mentioned before by almost a linear factor. Our algorithm is obtained by combining several new ideas with a data structure of Klein [2005] that supports multisource shortest paths queries in planar directed graphs in logarithmic time.Our algorithm can be adapted to address the variant of the problem in which one is interested in the replacement path itself (rather than the length of the path). In that case the algorithm is executed in a preprocessing stage constructing a data structure that supports replacement path queries in time Ã• (h), wherehis the number of hops in the replacement path. In addition, we can handle the variant in which vertices should be avoided instead of edges.