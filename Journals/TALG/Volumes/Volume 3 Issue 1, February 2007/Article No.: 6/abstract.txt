We introduce a new paradigm for querying strings in external memory, suited to the execution of sequences of operations. Formally, given a dictionary ofnstringsS1, …,Sn, we aim at supporting a search sequence formnot necessarily distinct stringsT1,T2, …,Tm, as well as inserting and deleting individual strings. The dictionary is stored on disk, where each access to a disk page fetchesBitems, the cost of an operation is the number of pages accessed (I/Os), and efficiency must be attained on entire sequences of string operations rather than on individual ones.Our approach relies on a novel and conceptually simple self-adjusting data structure (SASL) based on skip lists, that is also interestingper se. The search for the whole sequenceT1,T2, …,Tmcan be done in an expected number of I/Os:O(∑j&equals;1m&verbar;Tj&verbar;/B&plus; ∑i&equals;1nn(nilogBm/ni)),where eachTjmay or may not be present in the dictionary, andniis the number of timesSiis queried (i.e., the number ofTjs equal toSi). Moreover, inserting or deleting a stringSitakes an expected amortized numberO(&verbar;Si&verbar;/B&plus; logBn) of I/Os. The term ∑j&equals;1m&verbar;Tj&verbar;/Bin the search formula is a lower bound for reading the input, and the term ∑i&equals;1nnilogBm/ni(entropy of the query sequence) is a standard information-theoretic lower bound. We regard this result as thestatic optimality theorem for external-memory string access, as compared to Sleator and Tarjan's classical theorem for numerical dictionaries [Sleator and Tarjan 1985]. Finally, we reformulate the search bound if a cache is available, taking advantage of common prefixes among the strings examined in the search.