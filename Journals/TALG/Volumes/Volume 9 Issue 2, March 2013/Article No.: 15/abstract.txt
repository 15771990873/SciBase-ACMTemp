This article considers the problem of computing a minimum weight cycle in weighted undirected graphs. Given a weighted undirected graphG= (V,E,w), letCbe a minimum weight cycle ofG, letw(C) be the weight ofC, and letwmax(C) be the weight of the maximum edge ofC. We obtain three new approximation algorithms for the minimum weight cycle problem: (1) for integral weights from the range [1,M], an algorithm that reports a cycle of weight at most 4 3w(C) inO(n2logn(logn+ logM)) time; (2) For integral weights from the range [1,M], an algorithm that reports a cycle of weight at mostw(C) +wmax(C) inO(n2logn(logn+ logM)) time; (3) For nonnegative real edge weights, an algorithm that for anyε> 0 reports a cycle of weight at most (4 3 +ε)w(C) inO(1εn2logn(log logn)) time.In a recent breakthrough, Williams and Williams [2010] showed that a subcubic algorithm, that computes the exact minimum weight cycle in undirected graphs with integral weights from the range [1,M], implies a subcubic algorithm for computing all-pairs shortest paths in directed graphs with integral weights from the range [−M,M]. This implies that in order to get a subcubic algorithm for computing a minimum weight cycle, we have to relax the problem and to consider an approximated solution. Lingas and Lundell [2009] were the first to consider approximation in the context of minimum weight cycle in weighted graphs. They presented a 2-approximation algorithm for integral weights withO(n2logn(logn+ logM)) running time. They also posed, as an open problem, the question whether it is possible to obtain a subcubic algorithm with ac-approximation, wherec< 2. The current article answers this question in the affirmative, by presenting an algorithm with 4/3-approximation and the same running time. Surprisingly, the approximation factor of 4/3 is not accidental. We show, using the new result of Williams and Williams [2010], that a subcubic combinatorial algorithm with (4/3 −ε)-approximation, where 0 <ε≤ 1/3, implies a subcubic combinatorial algorithm for multiplying two boolean matrices.