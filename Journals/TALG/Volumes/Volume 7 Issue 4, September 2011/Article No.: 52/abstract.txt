We define and design succinct indexes for several abstract data types (ADTs). The concept is to design auxiliary data structures that ideally occupy asymptotically less space than the information-theoretic lower bound on the space required to encode the given data, and support an extended set of operations using the basic operators defined in the ADT. The main advantage of succinct indexes as opposed to succinct (integrated data/index) encodings is that we make assumptions only on the ADT through which the main data is accessed, rather than the way in which the data is encoded. This allows more freedom in the encoding of the main data. In this article, we present succinct indexes for various data types, namely strings, binary relations and multilabeled trees. Given the support for the interface of the ADTs of these data types, we can support various useful operations efficiently by constructing succinct indexes for them. When the operators in the ADTs are supported in constant time, our results are comparable to previous results, while allowing more flexibility in the encoding of the given data.Using our techniques, we design a succinct encoding that represents a string of lengthnover an alphabet of size σ usingnHk(S) + lg σ ·o(n) +O(nlg σ/lg lg lg σ) bits to support access/rank/select operations ino((lg lg σ)1+&epsi;) time, for any fixed constant &epsi; > 0. We also design a succinct text index usingnH0(S) +O(nlg σ/lg lg σ) bits that supports finding all the occ occurrences of a given pattern of lengthminO(mlg lg σ + occ lgn/lg&epsi;σ) time, for any fixed constant 0 < &epsi; < 1. Previous results on these two problems either have a lg σ factor instead of lg lg σ in the running time, or are not compressed. Finally, we present succinct encodings of binary relations and multi-labeled trees that are more compact than previous structures.