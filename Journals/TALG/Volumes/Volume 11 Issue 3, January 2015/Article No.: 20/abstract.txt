In this article, a fully compressed pattern matching problem is studied. The compression is represented by straight-line programs (SLPs)â€”that is, context-free grammars generating exactly one string; the termfullymeans that both the patternandthe text are given in the compressed form. The problem is approached using a recently developed technique of local recompression: the SLPs are refactored so that substrings of the pattern and text are encoded in both SLPs in the same way. To this end, the SLPs are locally decompressed and then recompressed in a uniform way.This technique yields anO((n&plus;m) logM) algorithm for compressed pattern matching, assuming thatMfits inO(1) machine words, wheren(m) is the size of the compressed representation of the text (pattern, respectively), andMis the size of the decompressed pattern. If onlym&plus;nfits inO(1) machine words, the running time increases toO((n&plus;m) logMlog (n&plus;m)). The previous best algorithm due to Lifshits hasO(n2m) running time.