Real-time applications often stand to benefit from service guarantees, and in particular delay guarantees. However, most mechanisms that provide delay guarantees also hard-limit the amount of traffic the application can generate, i.e., to enforce to a traffic contract. This can be a significant constraint and interfere with the operation of many real-time applications. Our purpose in this paper is to propose and investigate solutions that overcome this limitation. We have four major goals: 1) guarantee a delay bound to a contracted amount of real-time traffic; 2) transmit with the same delay bound as many excess real-time packets as possible; 3) enforce a given link sharing ratio between excess real-time traffic and other service classes, e.g., best-effort; and 4) preserve the ordering of real-time packets, if required. Our approach is based on a combination of buffer management and scheduling mechanisms for both guaranteeing delay bounds, while allowing the transmission of excess traffic. We evaluate the "cost" of our scheme by measuring the processing overhead of an actual implementation, and we investigate its performance by means of simulations using video traffic traces.