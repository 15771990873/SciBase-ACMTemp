Variable latencies due to communication delays or system noise is the central challenge faced by timekeeping algorithms when synchronizing over the network. Using extensive experiments, we explore the robustness of synchronization in the face of both normal and extreme latency variability and compare the feedback approaches of ntpd and ptpd (a software implementation of IEEE-1588) to the feed-forward approach of the RADclock and advocate for the benefits of a feed-forward approach. Noting the current lack of kernel support, we present extensions to existing mechanisms in the Linux and FreeBSD kernels giving full access to all available raw counters, and then evaluate the TSC, HPET, and ACPI counters' suitability as hardware timing sources. We demonstrate how the RADclock achieves the same microsecond accuracy with each counter.