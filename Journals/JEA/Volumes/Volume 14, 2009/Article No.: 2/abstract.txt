Suffix tree is one of the most important data structures in string algorithms and biological sequence analysis. Unfortunately, when it comes to implementing those algorithms and applying them to real genomic sequences, often the main memory size becomes the bottleneck. This is easily explained by the fact that while a DNA sequence of lengthnfrom alphabet Σ &equals; {A,C,G,T} can be stored innlog &verbar;Σ&verbar; &equlas; 2nbits, its suffix tree occupiesO(nlogn) bits. In practice, the size difference easily reaches factor 50.We report on an implementation of the compressed suffix tree very recently proposed by Sadakane (2007). The compressed suffix tree occupies space proportional to the text size, that is,O(nlog &verbar;Σ&verbar;) bits, and supports all typical suffix tree operations with at most lognfactor slowdown. Our experiments show that, for example, on a 10 MB DNA sequence, the compressed suffix tree takes 10&percnt; of the space of the normal suffix tree. At the same time, a representative algorithm is slowed down by factor 30.Our implementation follows the original proposal in spirit, but some internal parts are tailored toward practical implementation. Our construction algorithm has time requirementO(nlognlog &verbar;Σ&verbar;) and uses closely the same space as the final structure while constructing it: on the 10MB DNA sequence, the maximum space usage during construction is only 1.5 times the final product size. As by-products, we develop a method to createSuccinct Suffix Arraydirectly from Burrows-Wheeler transform and a space-efficient version of the suffixes-insertion algorithm to build balanced parentheses representation of suffix tree from LCP information.