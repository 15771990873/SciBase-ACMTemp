Given a textT[1&Dot;n] over an alphabet of size σ, thefull-text searchproblem consists in locating theoccoccurrences of a given patternP[1&Dot;m] inT.Compressed full-text self-indicesare space-efficient representations of the text that provide direct access to and indexed search on it.The LZ-index of Navarro is a compressed full-text self-index based on the LZ78 compression algorithm. This index requires about 5 times the size of the compressed text (in theory, 4nHk(T)+o(nlogσ) bits of space, whereHk(T) is thek-th order empirical entropy ofT). In practice, the average locating complexity of the LZ-index isO(σmlogσn+occσm/2), whereoccis the number of occurrences ofP. It can extract text substrings of length &ell; inO(&ell;) time. This index outperforms competing schemes both to locate short patterns and to extract text snippets. However, the LZ-index can be up to 4 times larger than the smallest existing indices (which usenHk(T)+o(nlogσ) bits in theory), and it does not offer space/time tuning options. This limits its applicability.In this article, we study practical ways to reduce the space of the LZ-index. We obtain new LZ-index variants that require 2(1+&epsis;)nHk(T) +o(nlogσ) bits of space, for any 0<&epsis; <1. They have an average locating time ofO(1/&epsis;(mlogn+occσm/2)), while extracting takesO(&ell;) time.We perform extensive experimentation and conclude that our schemes are able to reduce the space of the original LZ-index by a factor of 2/3, that is, around 3 times the compressed text size. Our schemes are able to extract about 1 to 2 MB of the text per second, being twice as fast as the most competitive alternatives. Pattern occurrences are located at a rate of up to 1 to 4 million per second. This constitutes the best space/time trade-off when indices are allowed to use 4 times the size of the compressed text or more.