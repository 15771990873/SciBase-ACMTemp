This article presents a critique of conventional collaboration transparency systems, also called “application-sharing” systems, which provide the real-time shared use of legacy single-user applications. We find that conventional collaboration transparency systems are inefficient in their use of network resources and lack support for key groupware principles: concurrent work, relaxed WYSIWIS, and group awareness. Next, we present an alternative approach to implementing collaboration transparency that provides many features previously seen only in collaboration-aware applicaitons. Our approach is based on a replicated architecture where selected single-user interface components are dynamically replaced by multiuser versions. The replacement occurs at run-time and is transparent to the single-user application and its developers.. As an instance of this approach, we describe its incorporation into a Java-based collaboration transparency system for serializable, Swing-based Java applications, called Flexible JAMM (Java Applets Made Multiuser). To validate that the flexible collaboration transparency system is truly an improvement over conventional systems, we conducted an empirical study of collaborators performing both tightly and loosely coupled tasks using Flexible JAMM versus a representative conventional collaboration transparency system, Microsoft NetMeeting. Completion times were significantly faster in the loosely coupled task using Flexible JAMM and were not adversely affected in the tightly coupled task. Accuracy was equivalent for both  systems. Participants greatly preferred Flexible JAMM.