In this article, we first introduce the concept of Spatial Skyline Queries (SSQ). Given a set of data pointsPand a set of query pointsQ, each data point has a number ofderived spatialattributes each of which is the point's distance to a query point. An SSQ retrieves those points ofPwhich are not dominated by any other point inPconsidering their derived spatial attributes. The main difference with the regular skyline query is that thisspatial dominationdepends on the location of the query pointsQ. SSQ has application in several domains such as emergency response and online maps. The main intuition and novelty behind our approaches is that we exploit the geometric properties of the SSQ problem space to avoid the exhaustive examination of all the point pairs inPandQ. Consequently, we reduce the complexity of SSQ search fromO(&verbar;P&verbar;2&verbar;Q&verbar;) toO(&verbar;S&verbar;2&verbar;C&verbar; + &sqrt;&verbar;P&verbar;), where &verbar;S&verbar; and &verbar;C&verbar; are the solution size and the number of vertices of the convex hull ofQ, respectively.Considering Euclidean distance, we propose two algorithms, B2S2and VS2, for static query points and one algorithm, VCS2, for streamingQwhose points change location over time (e.g., are mobile). VCS2exploits the pattern of change inQto avoid unnecessary recomputation of the skyline and hence efficiently perform updates. We also propose two algorithms, SNS2and VSNS2, that compute the spatial skyline with respect to the network distance in a spatial network database. Our extensive experiments using real-world datasets verify that both R-tree-based B2S2and Voronoi-based VS2outperform the best competitor approach in terms of both processing time and I/O cost. Furthermore, their output computed based on Euclidean distance is a good approximation of the spatial skyline in network space. For accurate computation of spatial skylines in network space, our experiments showed the superiority of VSNS2over SNS2.