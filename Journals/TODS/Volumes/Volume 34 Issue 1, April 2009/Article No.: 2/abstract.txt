We study the problem of processingsubgraph querieson a database that consists of a set of graphs. The answer to a subgraph query is the set of graphs in the database that are supergraphs of the query. In this article, we propose an efficient index,FG&ast;-index, to solve this problem.The cost of processing a subgraph query using most existing indexes mainly consists of two parts: theindex probingcost and thecandidate verificationcost. Index probing is to find the query in the index, or to find the graphs from which we can generate a candidate answer set for the query. Candidate verification is to test whether each graph in the candidate set is indeed a supergraph of the query. We design FG&ast;-index to minimize these two costs as follows.FG&ast;-index consists of three components: theFG-index, thefeature-index, and theFAQ-index. First, the FG-index employs the concept ofFrequent subGraph(FG) to allow the set of queries that are FGs to be answered without candidate verification. We call this set of queriesFG-queries. We can enlarge the set of FG-queries so that more queries can be answered without candidate verification; however, a larger set of FG-queries implies a larger FG-index and hence the index probing cost also increases. We propose the feature-index to reduce the index probing cost. The feature-index uses features to filter false results that are matched in the FG-index, so that we can quickly find the truly matching graphs for a query. For processing non-FG-queries, we propose the FAQ-index, which is dynamically constructed from the set ofFrequently Asked non-FG-Queries(FAQs). Using the FAQ-index, verification is not required for processing FAQs and only a small number of candidates need to be verified for processing non-FG-queries that arenot frequently asked. Finally, a comprehensive set of experiments verifies that query processing using FG&ast;-index is up to orders of magnitude more efficient than state-of-the-art indexes and it is also more scalable.