Wireless sensor network (WSN) testbeds are useful because they provide a way to test applications in an environment that makes it easy to deploy experiments, configure them statically or dynamically, and gather performance information. However, WSNs are typically composed of low-cost devices and tend to be unreliable, with failures a common phenomenon. Accurate knowledge of network health status, including nodes and links of each type, is critical for correctly configuring applications on WSN testbeds and for interpreting the data collected from them.In this article we present a stabilizing protocol, Chowkidar, that provides accurate and efficient network health monitoring in WSNs. Our approach adapts the well-known problem of message-passing rooted spanning tree construction and its use in propagation of information with feedback (PIF) for the case of a WSN. The Chowkidar protocol is initiated upon demand; that is, it does not involve ongoing maintenance, and it terminates with accurate results, including detection of failure and restart during the monitoring process. Chowkidar is distinguished from others in two important ways. Given the resource constraints of WSNs, it is message-efficient in that it uses only a few messages per node. Also, it tolerates ongoing node and link failure and node restart, in contrast to requiring that faults stop during convergence.We have implemented the Chowkidar protocol as part of enabling a network health status service that is tightly integrated with a remotely accessible wireless sensor network testbed, Kansei, at The Ohio State University. We present experimental results from this testbed that validate the correctness and performance of Chowkidar. We also report on initial experiences and lessons learnt from the integration of Chowkidar with Kansei, including feedback from both testbed users and administrators who have found Chowkidar to be a useful tool for improving the accuracy and efficiency of testbed experimentation and maintenance, and the need for well-defined policies to address issues such as minimizing interference with concurrently running experiments. Finally, we discuss extensions that enhance the functionality and usability of Chowkidar.