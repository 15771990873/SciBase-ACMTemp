Christian Bienia, Sanjeev Kumar, Jaswinder Pal Singh, and Kai Li. 2008. The PARSEC benchmark suite: Characterization and architectural implications. In Proceedings of the 17th International Conference on Parallel Architectures and Compilation Techniques (PACT’08). ACM, New York, NY, 72--81. DOI:http://dx.doi.org/10.1145/1454115.1454128
Robert D. Blumofe, Christopher F. Joerg, Bradley C. Kuszmaul, Charles E. Leiserson, Keith H. Randall, and Yuli Zhou. 1995. Cilk: An efficient multithreaded runtime system. SIGPLAN Not. 30, 8 (Aug. 1995), 207--216. DOI:http://dx.doi.org/10.1145/209937.209958
Michael Burke, Ron Cytron, Jeanne Ferrante, and Wilson Hsieh. 1989. Automatic generation of nested, fork-join parallelism. J. Supercomput. 3, 2 (1989), 71--88. DOI:http://dx.doi.org/10.1007/BF00129843
Simone Campanoni, Kevin Brownell, Svilen Kanev, Timothy M. Jones, Gu-Yeon Wei, and David Brooks. 2014. HELIX-RC: An architecture-compiler co-design for automatic parallelization of irregular programs. SIGARCH Comput. Archit. News 42, 3 (June 2014), 217--228. DOI:http://dx.doi.org/10.1145/2678373.2665705
Simone Campanoni, Timothy Jones, Glenn Holloway, Vijay Janapa Reddi, Gu-Yeon Wei, and David Brooks. 2012. HELIX: Automatic parallelization of irregular programs for chip multiprocessing. In Proceedings of the 10th International Symposium on Code Generation and Optimization (CGO’12). ACM, New York, NY, 84--93. DOI:http://dx.doi.org/10.1145/2259016.2259028
Michael K. Chen and Kunle Olukotun. 2003. The jrpm system for dynamically parallelizing java programs. In Proceedings of the 30th Annual International Symposium on Computer Architecture (ISCA’03). ACM Press, New York, NY, 434--446. DOI:http://dx.doi.org/10.1145/859618.859668
Daniel Cordes, Peter Marwedel, and Arindam Mallik. 2010. Automatic parallelization of embedded software using hierarchical task graphs and integer linear programming. In Proceedings of the 8th IEEE/ACM/IFIP International Conference on Hardware/Software Codesign and System Synthesis (CODES/ISSS’10). ACM, New York, NY, 267--276. DOI:http://dx.doi.org/10.1145/1878961.1879009
Matthew DeVuyst, Dean M. Tullsen, and Seon Wook Kim. 2011. Runtime parallelization of legacy code on a transactional memory system. In Proceedings of the 6th International Conference on High Performance and Embedded Architectures and Compilers (HiPEAC’11). ACM, New York, NY, 127--136. DOI:http://dx.doi.org/10.1145/1944862.1944882
Alejandro Duran, Xavier Teruel, Roger Ferrer, Xavier Martorell, and Eduard Ayguade. 2009. Barcelona OpenMP tasks suite: A set of benchmarks targeting the exploitation of task parallelism in OpenMP. In Proceedings of the 2009 International Conference on Parallel Processing (ICPP’09). IEEE Computer Society, Washington, DC, 124--131. DOI:http://dx.doi.org/10.1109/ICPP.2009.64
Tobias Edler von Koch and Björn Franke. 2014. Variability of data dependences and control flow. In Proceedings of the 2014 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS’14). 180--189. DOI:http://dx.doi.org/10.1109/ISPASS.2014.6844482
Yong hun Eom, Stephen Yang, James C. Jenista, and Brian Demsky. 2012. DOJ: Dynamically parallelizing object-oriented programs. SIGPLAN Not. 47, 8 (Feb. 2012), 85--96. DOI:http://dx.doi.org/10.1145/2370036.2145828
Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The program dependence graph and its use in optimization. ACM Trans. Program. Lang. Syst. 9, 3 (July 1987), 319--349. DOI:http://dx.doi.org/10.1145/24039.24041
Samuel Z. Guyer and Calvin Lin. 2005. Error checking with client-driven pointer analysis. Sci. Comput. Prog. 58, 1--2 (Oct. 2005), 83--114. DOI:http://dx.doi.org/10.1016/j.scico.2005.02.005
Ben Hardekopf and Calvin Lin. 2011. Flow-sensitive pointer analysis for millions of lines of code. In Proceedings of the 9th Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO’11). IEEE Computer Society, Washington, DC, 289--298.
Ben Hertzberg and Kunle Olukotun. 2011. Runtime automatic speculative parallelization. In Proceedings of the 9th Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO’11). IEEE Computer Society, Washington, DC, 64--73.
Jialu Huang, Stephen R. Beard, Nick P. Johnson, Thomas B. Jablin, and David I. August. 2013. Automatically exploiting cross-invocation parallelism using runtime information. In Proceedings of the 2013 IEEE/ACM International Symposium on Code Generation and Optimization (CGO’13). IEEE Computer Society, Washington, DC, USA, 1--11. DOI:http://dx.doi.org/10.1109/CGO.2013.6495001
Jialu Huang, Arun Raman, Thomas B. Jablin, Yun Zhang, Tzu-Han Hung, and David I. August. 2010. Decoupled software pipelining creates parallelization opportunities. In Proceedings of the 8th Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO’10). ACM, New York, NY, 121--130. DOI:http://dx.doi.org/10.1145/1772954.1772973
James Christopher Jenista, Yong hun Eom, and Brian Charles Demsky. 2011. OoOJava: Software out-of-order execution. In Proceedings of the 16th ACM Symposium on Principles and Practice of Parallel Programming (PPoPP’11). ACM, New York, NY, 57--68. DOI:http://dx.doi.org/10.1145/1941553.1941563
Nick P. Johnson, Hanjun Kim, Prakash Prabhu, Ayal Zaks, and David I. August. 2012. Speculative separation for privatization and reductions. In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’12). ACM, New York, NY, 359--370. DOI:http://dx.doi.org/10.1145/2254064.2254107
Troy A. Johnson, Rudolf Eigenmann, and T. N. Vijaykumar. 2007. Speculative thread decomposition through empirical optimization. In Proceedings of the 12th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP’07). ACM, New York, NY, 205--214. DOI:http://dx.doi.org/10.1145/1229428.1229474
Thomas Karcher and Victor Pankratius. 2011. Run-Time automatic performance tuning for multicore applications. In Euro-Par 2011 Parallel Processing, Emmanuel Jeannot, Raymond Namyst, and Jean Roman (Eds.). Lecture Notes in Computer Science, Vol. 6852. Springer, Berlin, 3--14. DOI:http://dx.doi.org/10.1007/978-3-642-23400-2_2
Ken Kennedy and John R. Allen. 2002. Optimizing Compilers for Modern Architectures: A Dependence-based Approach. Morgan Kaufmann, San Francisco, CA.
Hanjun Kim, Nick P. Johnson, Jae W. Lee, Scott A. Mahlke, and David I. August. 2012. Automatic speculative DOALL for clusters. In Proceedings of the 10th International Symposium on Code Generation and Optimization (CGO’12). ACM, New York, NY, 94--103. DOI:http://dx.doi.org/10.1145/2259016.2259029
Milind Kulkarni, Keshav Pingali, Bruce Walter, Ganesh Ramanarayanan, Kavita Bala, and L. Paul Chew. 2007. Optimistic parallelism requires abstractions. In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’07). ACM, New York, NY, 211--222. DOI:http://dx.doi.org/10.1145/1250734.1250759
Chris Lattner, Andrew Lenharth, and Vikram Adve. 2007. Making context-sensitive points-to analysis with heap cloning practical for the real world. SIGPLAN Not. 42, 6 (June 2007), 278--289. DOI:http://dx.doi.org/10.1145/1273442.1250766
Mojtaba Mehrara, Jeff Hao, Po-Chun Hsu, and Scott Mahlke. 2009. Parallelizing sequential applications on commodity hardware using a low-cost software transactional memory. SIGPLAN Not. 44, 6 (June 2009), 166--176. DOI:http://dx.doi.org/10.1145/1543135.1542495
Samuel P. Midkiff. 2012. Automatic Parallelization: An Overview of Fundamental Compiler Techniques. Morgan & Claypool Publishers.
Guilherme Ottoni, Ram Rangan, Adam Stoler, and David I. August. 2005. Automatic thread extraction with decoupled software pipelining. In Proceedings of the 38th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 38). IEEE Computer Society, Washington, DC, 105--118. DOI:http://dx.doi.org/10.1109/MICRO.2005.13
Louis-Noël Pouchet. 2012. PolyBench/C: The Polyhedral Benchmark Suite. Retrieved from http://www.cs.ucla.edu/∼pouchet/software/polybench/.
Arun Raman, Ayal Zaks, Jae W. Lee, and David I. August. 2012. Parcae: A system for flexible parallel execution. SIGPLAN Not. 47, 6 (June 2012), 133--144. DOI:http://dx.doi.org/10.1145/2345156.2254082
Easwaran Raman, Guilherme Ottoni, Arun Raman, Matthew J. Bridges, and David I. August. 2008. Parallel-stage decoupled software pipelining. In Proceedings of the 6th Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO’08). ACM, New York, NY, 114--123. DOI:http://dx.doi.org/10.1145/1356058.1356074
Ram Rangan, Neil Vachharajani, Manish Vachharajani, and David I. August. 2004. Decoupled software pipelining with the synchronization array. In Proceedings of the 13th International Conference on Parallel Architectures and Compilation Techniques (PACT’04). IEEE Computer Society, Washington, DC, 177--188. DOI:http://dx.doi.org/10.1109/PACT.2004.14
Lawrence Rauchwerger and David Padua. 1995. The LRPD test: Speculative run-time parallelization of loops with privatization and reduction parallelization. In Proceedings of the ACM SIGPLAN 1995 Conference on Programming Language Design and Implementation (PLDI’95). ACM, New York, NY, 218--232. DOI:http://dx.doi.org/10.1145/207110.207148
Radu Rugina and Martin Rinard. 1999. Automatic parallelization of divide and conquer algorithms. SIGPLAN Not. 34, 8 (May 1999), 72--83. DOI:http://dx.doi.org/10.1145/329366.301111
Silvius Rus, Lawrence Rauchwerger, and Jay Hoeflinger. 2003. Hybrid Analysis: Static and dynamic memory reference analysis. Int. J. Parallel Program. 31, 4 (Aug. 2003), 251--283. DOI:http://dx.doi.org/10.1023/A:1024597010150
Vivek Sarkar. 1991. Automatic partitioning of a program dependence graph into parallel tasks. IBM J. Res. Dev. 35, 5--6 (Sept. 1991), 779--804. DOI:http://dx.doi.org/10.1147/rd.355.0779
Kevin Streit, Clemens Hammacher, Andreas Zeller, and Sebastian Hack. 2013. Sambamba: Runtime adaptive parallel execution. In Proceedings of the 3rd International Workshop on Adaptive Self-Tuning Computing Systems (ADAPT’13). ACM, New York, NY, Article 7, 6 pages. DOI:http://dx.doi.org/10.1145/2484904.2484911
Sid Ahmed Ali Touati, Julien Worms, and Sébastien Briais. 2013. The Speedup-Test: A statistical methodology for programme speedup analysis and computation. Concurr. Comp.: Pract. Exper. 25, 10 (2013), 1410--1426. DOI:http://dx.doi.org/10.1002/cpe.2939
Peng Tu and David A. Padua. 1994. Automatic array privatization. In Proceedings of the 6th International Workshop on Languages and Compilers for Parallel Computing. Springer-Verlag, London, UK, 500--521. http://dl.acm.org/citation.cfm&quest;id=645671.665384
Neil Vachharajani, Ram Rangan, Easwaran Raman, Matthew J. Bridges, Guilherme Ottoni, and David I. August. 2007. Speculative decoupled software pipelining. In Proceedings of the 16th International Conference on Parallel Architecture and Compilation Techniques (PACT’07). IEEE Computer Society, Washington, DC, 49--59. DOI:http://dx.doi.org/10.1109/PACT.2007.66
Hans Vandierendonck, Sean Rul, and Koen De Bosschere. 2010. The paralax infrastructure: Automatic parallelization with a helping hand. In Proceedings of the 19th International Conference on Parallel Architectures and Compilation Techniques (PACT’10). ACM, New York, NY, 389--400. DOI:http://dx.doi.org/10.1145/1854273.1854322
Hongtao Zhong, M. Mehrara, S. Lieberman, and S. Mahlke. 2008. Uncovering hidden loop level parallelism in sequential applications. In Proceedings of the IEEE 14th International Symposium on High Performance Computer Architecture (HPCA’08). 290--301. DOI:http://dx.doi.org/10.1109/HPCA.2008.4658647
