AbsInt. 2015. aiT Worst-Case Execution Time Analyzers. Retrieved from http://www.absint.com/ait/.
Hakan Aydin , Rami Melhem , Daniel Mossé , Pedro Mejía-Alvarez, Power-Aware Scheduling for Periodic Real-Time Tasks, IEEE Transactions on Computers, v.53 n.5, p.584-600, May 2004[doi>10.1109/TC.2004.1275298]
Lakshmi N. Chakrapani , John Gyllenhaal , Wen-mei W. Hwu , Scott A. Mahlke , Krishna V. Palem , Rodric M. Rabbah, Trimaran: an infrastructure for research in instruction-level parallelism, Proceedings of the 17th international conference on Languages and Compilers for High Performance Computing, p.32-41, September 22-24, 2004, West Lafayette, IN[doi>10.1007/11532378_4]
Pohua P. Chang , Scott A. Mahlke , Wen-mei W. Hwu, Using profile information to assist classic code optimizations, Software—Practice & Experience, v.21 n.12, p.1301-1321, Dec. 1991[doi>10.1002/spe.4380211204]
Linda Torczon , Keith Cooper, Engineering A Compiler, Morgan Kaufmann Publishers Inc., San Francisco, CA, 2007
ILOG Cplex. 2007. 11.0 Users Manual. Report.
Jakob Engblom , Andreas Ermedahl, Pipeline Timing Analysis Using a Trace-Driven Simulator, Proceedings of the Sixth International Conference on Real-Time Computing Systems and Applications, p.88, December 13-15, 1999
Heiko Falk, WCET-aware register allocation based on graph coloring, Proceedings of the 46th Annual Design Automation Conference, July 26-31, 2009, San Francisco, California[doi>10.1145/1629911.1630100]
Heiko Falk , Jan C. Kleinsorge, Optimal static WCET-aware scratchpad allocation of program code, Proceedings of the 46th Annual Design Automation Conference, July 26-31, 2009, San Francisco, California[doi>10.1145/1629911.1630101]
H. Falk , P. Lokuciejewski , H. Theiling, Design of a WCET-Aware C Compiler, Proceedings of the 2006 IEEE/ACM/IFIP Workshop on Embedded Systems for Real Time Multimedia, p.121-126, October 26-27, 2006[doi>10.1109/ESTMED.2006.321284]
Heiko Falk , Norman Schmitz , Florian Schmoll, WCET-aware Register Allocation Based on Integer-Linear Programming, Proceedings of the 2011 23rd Euromicro Conference on Real-Time Systems, p.13-22, July 05-08, 2011[doi>10.1109/ECRTS.2011.10]
H. Falk , M. Schwarzer, Loop Nest Splitting for WCET-Optimization and Predictability Improvement, Proceedings of the 2006 IEEE/ACM/IFIP Workshop on Embedded Systems for Real Time Multimedia, p.115-120, October 26-27, 2006[doi>10.1109/ESTMED.2006.321283]
J. A. Fisher, Trace Scheduling: A Technique for Global Microcode Compaction, IEEE Transactions on Computers, v.30 n.7, p.478-490, July 1981[doi>10.1109/TC.1981.1675827]
Joseph A. Fisher , Paolo Faraboschi , Cliff Young, Embedded Computing: A VLIW Approach to Architecture, Compilers and Tools, Morgan Kaufmann Publishers Inc., San Francisco, CA, 2005
Jan Gustafsson, Adam Betts, Andreas Ermedahl, and Bjrn Lisper. 2010. The mlardalen WCET benchmarks: Past, present and future. In Proceedings of the 10th International Workshop on Worst-Case Execution Time Analysis (WCET’10), Björn Lisper (Ed.), Vol. 15. Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik, 136--146. The printed version of the WCET’10 proceedings are published by OCG (www.ocg.at) - ISBN 978-3-85403-268-7.
M. R. Guthaus , J. S. Ringenberg , D. Ernst , T. M. Austin , T. Mudge , R. B. Brown, MiBench: A free, commercially representative embedded benchmark suite, Proceedings of the Workload Characterization, 2001. WWC-4. 2001 IEEE International Workshop, p.3-14, December 02-02, 2001[doi>10.1109/WWC.2001.15]
J. Henkel , S. Parameswaran, Designing Embedded Processors: A Low Power Perspective, Springer Publishing Company, Incorporated, 2007
Yazhi Huang , Liang Shi , Jianhua Li , Qingan Li , Chun Jason Xue, WCET-Aware Re-Scheduling Register Allocation for Real-Time Embedded Systems With Clustered VLIW Architecture, IEEE Transactions on Very Large Scale Integration (VLSI) Systems, v.22 n.1, p.168-180, January 2014[doi>10.1109/TVLSI.2012.2236114]
Chris Lattner , Vikram Adve, LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation, Proceedings of the international symposium on Code generation and optimization: feedback-directed and runtime optimization, p.75, March 20-24, 2004, Palo Alto, California
Rainer Leupers, Exploiting conditional instructions in code generation for embedded VLIW processors, Proceedings of the conference on Design, automation and test in Europe, p.23-es, January 1999, Munich, Germany[doi>10.1145/307418.307462]
Xianfeng Li , Yun Liang , Tulika Mitra , Abhik Roychoudhury, Chronos: A timing analyzer for embedded software, Science of Computer Programming, v.69 n.1-3, p.56-67, December, 2007[doi>10.1016/j.scico.2007.01.014]
Xianfeng Li , Abhik Roychoudhury , Tulika Mitra, Modeling out-of-order processors for WCET analysis, Real-Time Systems, v.34 n.3, p.195-227, November  2006[doi>10.1007/s11241-006-9205-5]
Yau-Tsun Steven Li , Sharad Malik, Performance analysis of embedded software using implicit path enumeration, ACM SIGPLAN Notices, v.30 n.11, p.88-98, Nov. 1995[doi>10.1145/216633.216666]
Paul Lokuciejewski , Heiko Falk , Peter Marwedel, WCET-driven Cache-based Procedure Positioning Optimizations, Proceedings of the 2008 Euromicro Conference on Real-Time Systems, p.321-330, July 02-04, 2008[doi>10.1109/ECRTS.2008.20]
Paul Lokuciejewski , Heiko Falk , Peter Marwedel , Henrik Theiling, WCET-driven, code-size critical procedure cloning, Proceedings of the 11th international workshop on Software & compilers for embedded systems, March 13-14, 2008, Munich, Germany
Paul Lokuciejewski, Fatih Gedikli, Peter Marwedel, and Katharina Morik. 2009. Automatic WCET reduction by machine learning based heuristics for function inlining. In Proceedings of the 3rd Workshop on Statistical and Machine Learning Approaches to Architectures and Compilation (SMART’09). 1--15.
Paul Lokuciejewski , Timon Kelter , Peter Marwedel, Superblock-Based Source Code Optimizations for WCET Reduction, Proceedings of the 2010 10th IEEE International Conference on Computer and Information Technology, p.1918-1925, June 29-July 01, 2010[doi>10.1109/CIT.2010.327]
Paul Lokuciejewski , Peter Marwedel, Combining Worst-Case Timing Models, Loop Unrolling, and Static Loop Analysis for WCET Minimization, Proceedings of the 2009 21st Euromicro Conference on Real-Time Systems, p.35-44, July 01-03, 2009[doi>10.1109/ECRTS.2009.9]
Paul Lokuciejewski and Peter Marwedel. 2010. Worst-Case Execution Time Aware Compilation Techniques for Real-Time Systems. Springer Science & Business Media.
Scott A. Mahlke , David C. Lin , William Y. Chen , Richard E. Hank , Roger A. Bringmann, Effective compiler support for predicated execution using the hyperblock, ACM SIGMICRO Newsletter, v.23 n.1-2, p.45-54, Dec. 1992[doi>10.1145/144965.144998]
Dhiraj K. Pradhan, Fault-tolerant computer system design, Prentice-Hall, Inc., Upper Saddle River, NJ, 1996
Peter Puschner. 2002. Is worst-case execution-time analysis a non-problem?-Towards new software and hardware architecture. In Proceedings of the 2nd Euromicro International Workshop on WCET Analysis.
Martin Schoeberl , Sahar Abbaspour , Benny Akesson , Neil Audsley , Raffaele Capasso , Jamie Garside , Kees Goossens , Sven Goossens , Scott Hansen , Reinhold Heckmann , Stefan Hepp , Benedikt Huber , Alexander Jordan , Evangelia Kasapaki , Jens Knoop , Yonghui Li , Daniel Prokesch , Wolfgang Puffitsch , Peter Puschner , André Rocha , Cláudio Silva , Jens Sparsø , Alessandro Tocchi, T-CREST, Journal of Systems Architecture: the EUROMICRO Journal, v.61 n.9, p.449-471, October 2015[doi>10.1016/j.sysarc.2015.04.002]
Martin Schoberl, Peter Puschner, and Raimund Kirner. 2009. Single-path programming on a chip-multiprocessor system. In Proceedings of the Workshop on Reconciling Performance with Predictability (RePP’09).
Martin Schoberl, Pascal Schleuniger, Wolfgang Puffitsch, Florian Brandner, Christian W. Probst, Sven Karlsson, Tommy Thorn, and others. 2011. Towards a time-predictable dual-issue microprocessor: The Patmos approach. In Bringing Theory to Practice: Predictability and Performance in Embedded Systems, Vol. 18. 11--21.
David Seal, ARM Architecture Reference Manual, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 2000
Richard M. Stallman. 2015. Using the GNU Compiler Collection. Free Software Foundation. Retrieved from https://gcc.gnu.org/onlinedocs/gcc-5.2.0/gcc.pdf.
Vivy Suhendra , Tulika Mitra , Abhik Roychoudhury , Ting Chen, WCET Centric Data Allocation to Scratchpad Memory, Proceedings of the 26th IEEE International Real-Time Systems Symposium, p.223-232, December 05-08, 2005[doi>10.1109/RTSS.2005.45]
Jack Whitham , Neil Audsley, Time-Predictable Out-of-Order Execution for Hard Real-Time Systems, IEEE Transactions on Computers, v.59 n.9, p.1210-1223, September 2010[doi>10.1109/TC.2010.109]
Reinhard Wilhelm , Jakob Engblom , Andreas Ermedahl , Niklas Holsti , Stephan Thesing , David Whalley , Guillem Bernat , Christian Ferdinand , Reinhold Heckmann , Tulika Mitra , Frank Mueller , Isabelle Puaut , Peter Puschner , Jan Staschulat , Per Stenström, The worst-case execution-time problem—overview of methods and survey of tools, ACM Transactions on Embedded Computing Systems (TECS), v.7 n.3, p.1-53, April 2008[doi>10.1145/1347375.1347389]
Kent Wilken , Jack Liu , Mark Heffernan, Optimal instruction scheduling using integer programming, ACM SIGPLAN Notices, v.35 n.5, p.121-133, May 2000[doi>10.1145/358438.349318]
Hui Wu , Jingling Xue , Sri Parameswaran, Optimal WCET-aware code selection for scratchpad memory, Proceedings of the tenth ACM international conference on Embedded software, October 24-29, 2010, Scottsdale, Arizona, USA[doi>10.1145/1879021.1879030]
Jun Yan , Wei Zhang, A time-predictable VLIW processor and its compiler support, Real-Time Systems, v.38 n.1, p.67-84, January   2008[doi>10.1007/s11241-007-9030-5]
Wankang Zhao , William Kreahling , David Whalley , Christopher Healy , Frank Mueller, Improving WCET by Optimizing Worst-Case Paths, Proceedings of the 11th IEEE Real Time on Embedded Technology and Applications Symposium, p.138-147, March 07-10, 2005[doi>10.1109/RTAS.2005.29]
Wankang Zhao , David Whalley , Christopher Healy , Frank Mueller, Improving WCET by applying a WC code-positioning optimization, ACM Transactions on Architecture and Code Optimization (TACO), v.2 n.4, p.335-365, December 2005[doi>10.1145/1113841.1113842]
