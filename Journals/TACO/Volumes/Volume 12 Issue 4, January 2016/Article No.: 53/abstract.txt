In high-performance systems,stencilcomputations play a crucial role as they appear in a variety of different fields of application, ranging from partial differential equation solving, to computer simulation of particlesâ€™ interaction, to image processing and computer vision. The computationally intensive nature of those algorithms created the need for solutions to efficiently implement them in order to save both execution time and energy. This, in combination with their regular structure, has justified their widespread study and the proposal of largely different approaches to their optimization.However, most of these works are focused on aggressive compile time optimization, cache locality optimization, and parallelism extraction for the multicore/multiprocessor domain, while fewer works are focused on the exploitation of custom architectures to further exploit the regular structure of Iterative Stencil Loops (ISLs), specifically with the goal of improving power efficiency.This work introduces a methodology to systematically design power-efficient hardware accelerators for the optimal execution of ISL algorithms on Field-programmable Gate Arrays (FPGAs). As part of the methodology, we introduce the notion of Streaming Stencil Time-step (SST), astreaming-based architecturecapable of achieving both low resource usage and efficient data reuse thanks to anoptimaldata buffering strategy, and we introduce a technique called SSTsqueuingthat is capable of delivering apseudolinearexecution time speedup with constant bandwidth.The methodology has been validated on significant benchmarks on aVirtex-7FPGA using theXilinxVivadosuite. Results demonstrate how the efficient usage of the on-chip memory resources realized by an SST allows one to treat problem sizes whose implementation would otherwise not be possible via direct synthesis of the original, unmanipulated code via High-Level Synthesis (HLS). We also show how the SSTs queuing effectively ensures a pseudolinear throughput speedup while consuming constant off-chip bandwidth.