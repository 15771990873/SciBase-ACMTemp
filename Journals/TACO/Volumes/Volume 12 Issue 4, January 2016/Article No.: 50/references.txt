Alfred V. Aho , Mahadevan Ganapathi , Steven W. K. Tjiang, Code generation using tree matching and dynamic programming, ACM Transactions on Programming Languages and Systems (TOPLAS), v.11 n.4, p.491-516, Oct. 1989[doi>10.1145/69558.75700]
A. Balachandran , D. M. Dhamdhere , S. Biswas, Efficient retargetable code generation using bottom-up tree pattern matching, Computer Languages, v.15 n.3, p.127-140, 1990[doi>10.1016/0096-0551(90)90006-B]
Rajkishore Barik , Jisheng Zhao , Vivek Sarkar, Efficient Selection of Vector Instructions Using  Dynamic Programming, Proceedings of the 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture, p.201-212, December 04-08, 2010[doi>10.1109/MICRO.2010.38]
Albert Cohen, Sylvain Girbal, and Olivier Temam. 2004. A polyhedral approach to ease the composition of program transformations. In Euro-Par. 292--303.
Alexandre E. Eichenberger , Peng Wu , Kevin O'Brien, Vectorization for SIMD architectures with alignment constraints, Proceedings of the ACM SIGPLAN 2004 conference on Programming language design and implementation, June 09-11, 2004, Washington DC, USA[doi>10.1145/996841.996853]
Liza Fireman , Erez Petrank , Ayal Zaks, New algorithms for SIMD alignment, Proceedings of the 16th international conference on Compiler construction, March 26-30, 2007, Braga, Portugal
Franz Franchetti and Markus Puschel. 1993. A SIMD vectorizing compiler for digital signal processing algorithms. In Proceedings of the 1993 IEEE Vehicle Navigation and Information Systems Conference. 7.
Franz Franchetti , Markus Püschel, Generating SIMD vectorized permutations, Proceedings of the Joint European Conferences on Theory and Practice of Software 17th international conference on Compiler construction, March 29-April 06, 2008, Budapest, Hungary
Christopher W. Fraser , Robert R. Henry , Todd A. Proebsting, BURG: fast optimal instruction selection and tree parsing, ACM SIGPLAN Notices, v.27 n.4, p.68-76, April 1992[doi>10.1145/131080.131089]
Ralf Karrenberg , Sebastian Hack, Whole-function vectorization, Proceedings of the 9th Annual IEEE/ACM International Symposium on Code Generation and Optimization, p.141-150, April 02-06, 2011
Alexei Kudriavtsev , Peter Kogge, Generation of permutations for SIMD processors, ACM SIGPLAN Notices, v.40 n.7, July 2005[doi>10.1145/1070891.1065931]
Samuel Larsen , Saman Amarasinghe, Exploiting superword level parallelism with multimedia instruction sets, Proceedings of the ACM SIGPLAN 2000 conference on Programming language design and implementation, p.145-156, June 18-21, 2000, Vancouver, British Columbia, Canada[doi>10.1145/349299.349320]
C. L. Lawson , R. J. Hanson , D. R. Kincaid , F. T. Krogh, Basic Linear Algebra Subprograms for Fortran Usage, ACM Transactions on Mathematical Software (TOMS), v.5 n.3, p.308-323, Sept. 1979[doi>10.1145/355841.355847]
Ruby B. Lee, Accelerating Multimedia with Enhanced Microprocessors, IEEE Micro, v.15 n.2, p.22-32, April 1995[doi>10.1109/40.372347]
Jun Liu , Yuanrui Zhang , Ohyoung Jang , Wei Ding , Mahmut Kandemir, A compiler framework for extracting superword level parallelism, Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, June 11-16, 2012, Beijing, China[doi>10.1145/2254064.2254106]
Saeed Maleki , Yaoqing Gao , Maria J. Garzarán , Tommy Wong , David A. Padua, An Evaluation of Vectorizing Compilers, Proceedings of the 2011 International Conference on Parallel Architectures and Compilation Techniques, p.372-382, October 10-14, 2011[doi>10.1109/PACT.2011.68]
Dorit Nuzman , Ira Rosen , Ayal Zaks, Auto-vectorization of interleaved data for SIMD, Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation, June 11-14, 2006, Ottawa, Ontario, Canada[doi>10.1145/1133981.1133997]
Gabriele Paoloni. 2010. How to Benchmark Code Execution Times on Intel IA-32 and IA-64 Instruction Set Architectures. Intel Corporation. Retrieved from http://www.intel.com/content/dam/www/public/us/en/documents/white-papers/ia-32-ia-64-benchmark-code-execution-paper.pdf.
Yongjun Park , Sangwon Seo , Hyunchul Park , Hyoun Kyu Cho , Scott Mahlke, SIMD defragmenter: efficient ILP realization on data-parallel architectures, ACM SIGARCH Computer Architecture News, v.40 n.1, March 2012[doi>10.1145/2189750.2151014]
Gang Ren , Peng Wu , David Padua, Optimizing data permutations for SIMD devices, ACM SIGPLAN Notices, v.41 n.6, June 2006[doi>10.1145/1133255.1133996]
Kenneth Rosen. 2011. Discrete Mathematics and Its Applications (7th ed.). McGraw-Hill.
Thomas Schaub , Simon Moll , Ralf Karrenberg , Sebastian Hack, The Impact of the SIMD Width on Control-Flow and Memory Divergence, ACM Transactions on Architecture and Code Optimization (TACO), v.11 n.4, p.1-25, January 2015[doi>10.1145/2687355]
Jaewook Shin , Jacqueline Chame , Mary W. Hall, Compiler-Controlled Caching in Superword Register Files for Multimedia Extension Architectures, Proceedings of the 2002 International Conference on Parallel Architectures and Compilation Techniques, p.45-55, September 22-25, 2002
Jaewook Shin , Mary Hall , Jacqueline Chame, Superword-Level Parallelism in the Presence of Control Flow, Proceedings of the international symposium on Code generation and optimization, p.165-175, March 20-23, 2005[doi>10.1109/CGO.2005.33]
Deepu Talla , Lizy Kurian John , Doug Burger, Bottlenecks in Multimedia Processing with SIMD Style Extensions and Architectural Enhancements, IEEE Transactions on Computers, v.52 n.8, p.1015-1031, August 2003[doi>10.1109/TC.2003.1223637]
Endong Wang, Qing Zhang, Bo Shen, Guangyong Zhang, Xiaowei Lu, Qing Wu, and Yajuan Wang. 2014. Intel math kernel library. In High-Performance Computing on the Intel<sup>®</sup> Xeon Phi. Springer, 167--188.
R. Clint Whaley, Antoine Petitet, and Jack J Dongarra. 2001. Automated empirical optimizations of software and the ATLAS project. Parallel Computing 27, 1 (2001), 3--35.
Michael Joseph Wolfe. 1996. High Performance Compilers for Parallel Computing. Addison-Wesley.
