Recent empirical studies have shown that multicore scaling is fast becoming power limited, and consequently, an increasing fraction of a multicore processor has to be under clocked or powered off. Therefore, in addition to fundamental innovations in architecture, compilers and parallelization of application programs, there is a need to develop practical and effectivedynamic energy management(DEM) techniques for multicore processors.Existing DEM techniques mainly target reducing processor power consumption and temperature, and only few of them have addressed improving energy efficiency for multicore systems. With energy efficiency taking a center stage in all aspects of computing, the focus of the DEM needs to be on finding practical methods to maximize processor efficiency. Towards this, this article presents STEAM -- an optimal closed-loop DEM controller designed for multicore processors. The objective is to maximize energy efficiency by dynamic voltage and frequency scaling (DVFS). Energy efficiency is defined as the ratio of performance to power consumption orperformance-per-watt(PPW). This is the same as the number of instructions executed per Joule. The PPW metric is actually replaced byPαPW(performanceα-per-Watt), which allows for controlling the importance of performance versus power consumption by varying α.The proposed controller was implemented on a Linux system and tested with the Intel Sandy Bridge processor. There are three power management schemes calledgovernors, available with Intel platforms. They are referred to as (1)Powersave(lowest power consumption), (2)Performance(achieves highest performance), and (3)Ondemand. Our simple and lightweight controller when executing SPEC CPU2006, PARSEC, and MiBench benchmarks have achieved an average of 18&percnt; improvement in energy efficiency (MIPS/Watt) over these ACPI policies. Moreover, STEAM also demonstrated an excellent prediction of core temperatures and power consumption, and the ability to control the core temperatures within 3ˆC of the specified maximum. Finally, the overhead of the STEAM implementation (in terms of CPU resources) is less than 0.25&percnt;. The entire implementation is self-contained and can be installed on any processor with very little prior knowledge of the processor.