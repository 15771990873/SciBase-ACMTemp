Numerous methods have been described in research literature with methods to improve reliability of processors by the use of control-flow checking. High performance and code-size penalties cripple the proposed software approaches, while hardware approaches are not scalable and are thus rarely implemented in real embedded systems. In this article, we show that by including control-flow checking as an issue to be considered when designing as embedded processor, we are able to reduce overheads considerably and still provide a scalable solution to this problem. The technique described in this article includes architectural improvements to the processor and binary rewriting of the application. Architectural refinement incorporates additional instructions to the instruction set architecture, while the binary rewriting utilizes these additional instructions into the program flow. Applications from an embedded systems benchmark suite have been used to test and evaluate the system. Our approach increased code size by only 5.55&percnt; to 13.5&percnt; and reduced performance by just 0.54&percnt; to 2.83&percnt; for eight different industry standard benchmarks. The additional hardware overhead due to the additional instruction in the design is just 2.70&percnt;. In contrast, the state-of-the-art software-only approach required 50&percnt; to 150&percnt; additional code, and reduced performance by 53.5&percnt; to 99.5&percnt; when monitoring was inserted. Fault injection analysis demonstrates that our solution is capable of capturing and recovering from all the injected control-flow errors, while the software-only approach detected 87&percnt; of the injected control-flow errors.