Event logging is an important technique for networked embedded systems like wireless sensor networks. It can greatly help developers to understand complex system behaviors and diagnose program bugs. Existing logging facilities do not well satisfy three practical requirements:flexibility,efficiency, andhigh synchronization accuracy. To simultaneously satisfy these requirements, we present Dylog, a dynamic logging facility for networked embedded systems. Dylog employs several techniques. First, Dylog uses binary instrumentation for dynamically inserting or removing logging statements, enablingflexibleand interactive debugging at runtime. Second, Dylog incorporates anefficientstorage system and log collection protocol for recording and transferring the logging messages. Third, Dylog employs a lightweight data-driven approach for reconstructing the synchronized time of the logging messages. Dylog uses MAC-layer timestamping and drift compensation to achievehigh synchronization accuracy. We implement Dylog on the TinyOS 2.1.1/TelosB platform. Results show the following: (1) Dylog incurs a small overhead. Indirections in Dylog incur an additional execution overhead of less than 1&percnt;. Dylog reduces the logging storage size by approximately 50&percnt; compared with the standard TinyOS radio printf library. Dylog reduces the patch size by more than 90&percnt;, compared with incremental reprogramming. (2) Dylog reduces the synchronization overhead by 78&percnt; in terms of transmission cost, compared with a traditional time synchronization protocol, FTSP, and it can achieve a high time synchronization accuracy of 5.4Î¼s. (3) Dylog can help diagnose system problems effectively at the source-code level for three real-world scenarios.