ABDALI, S.K. An abstraction algorithm for combinatory logic. J Symbolic Logic 41, 1 (1976), 222-224.
Alfred V. Aho , Ravi Sethi , Jeffrey D. Ullman, Compilers: principles, techniques, and tools, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1986
Andrew W. Appel, Semantics-directed code generation, Proceedings of the 12th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.315-324, January 14-16, 1985, New Orleans, Louisiana, United States[doi>10.1145/318593.318661]
A. W. Appel , T. Jim, Continuation-passing, closure-passing style, Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.293-302, January 11-13, 1989, Austin, Texas, United States[doi>10.1145/75277.75303]
BURGE, W.H. Recursive ProAEramming Techntques Addison-Wesiey, Reading, Mass., 1975.
Luca Cardelli, Compiling a functional language, Proceedings of the 1984 ACM Symposium on LISP and functional programming, p.208-217, August 06-08, 1984, Austin, Texas, United States[doi>10.1145/800055.802037]
G. Cousineau , P.-L. Curien, The categorical abstract machine, Science of Computer Programming, v.8 n.2, p.173-202, April 1, 1987[doi>10.1016/0167-6423(87)90020-7]
CURRY, H. B., AND FE~S, R. Combinatory Logzc. Vol. I, North-Holland, New York, 1958.
John Fairbairn , Stuart Wray, TIM: A simple, lazy abstract machine to execute supercombinators, Proc. of a conference on Functional programming languages and computer architecture, p.34-45, October 1987, Portland, Oregon, United States
FRADET, P. Compilation des langages fonctionnels par transformation de programmes. Th~se de Doctorat de l'Universit~ de Rennes I, 1988.
R. J. M. Hughes, Super-combinators a new implementation method for applicative languages, Proceedings of the 1982 ACM symposium on LISP and functional programming, p.1-10, August 15-18, 1982, Pittsburgh, Pennsylvania, United States[doi>10.1145/800068.802129]
Thomas Johnsson, Efficient compilation of lazy evaluation, ACM SIGPLAN Notices, v.19 n.6, p.58-69, June 1984[doi>10.1145/502949.502880]
Thomas Johnsson, Lambda lifting: transforming programs to recursive equations, Proc. of a conference on Functional programming languages and computer architecture, p.190-203, January 1985, Nancy, France
R. Kelsey , P. Hudak, Realistic compilation by program transformation (detailed summary), Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.281-292, January 11-13, 1989, Austin, Texas, United States[doi>10.1145/75277.75302]
David Kranz , Norman Adams , Richard Kelsey , Jonathan Rees , Paul Hudak , James Philbin, ORBIT: an optimizing compiler for scheme, Proceedings of the 1986 SIGPLAN symposium on Compiler construction, p.219-233, June 25-27, 1986, Palo Alto, California, United States[doi>10.1145/12276.13333]
LANUIN, P.J. The mechanical evaluation of expressions. Comput. J. 6 (1964), 308 320.
M. Lemaître , M. Castan , M.-H. Durand , G. Durrieu , B. Lecussan, Mechanisms for efficient multiprocessor combinator reduction, Proceedings of the 1986 ACM conference on LISP and functional programming, p.113-121, August 1986, Cambridge, Massachusetts, United States[doi>10.1145/319838.319855]
David Lester, The G-machine as a representation of stack semantics, Proc. of a conference on Functional programming languages and computer architecture, p.46-59, October 1987, Portland, Oregon, United States
MAUNV, M. Compilation des langages fonctionnels dans les combinateurs cat~goriques. Application au langage ML. Th~se de Troisi~me Cycle de l'Unlversit~ de Paris Vil, 1985.
Michel Mauny , Ascánder Suárez, Implementing functional languages in the Categorical Abstract Machine, Proceedings of the 1986 ACM conference on LISP and functional programming, p.266-278, August 1986, Cambridge, Massachusetts, United States[doi>10.1145/319838.319869]
PLOTKIN, G.D. A structural approach fo operational semantics. Tech. Rep. DAIMI FN-19, Univ. of Aarhus, 1981.
PLOTKIN, G.D. Call-by-name, call-by-value and the k-calculus. Theor. Comput. Sci. I (1975), 125-159.
Jean-Claude Raoult , Ravi Sethi, Properties of a Notation for Combining Functions, Journal of the ACM (JACM), v.30 n.3, p.595-611, July 1983[doi>10.1145/2402.322393]
John C. Reynolds, Definitional interpreters for higher-order programming languages, Proceedings of the ACM annual conference, p.717-740, August 01-01, 1972, Boston, Massachusetts, United States[doi>10.1145/800194.805852]
John C. Reynolds, G/EDANKEN—a simple typeless language based on the principle of completeness and the reference concept, Communications of the ACM, v.13 n.5, p.308-319, May 1970[doi>10.1145/362349.362364]
David A. Schmidt, State transition machines for lambda calculus expressions, Semantics-Directed Compiler Generation, Proceedings of a Workshop, p.415-440, January 14-18, 1980
Ravi Sethi, Control Flow Aspects of Semantics-Directed Compiling, ACM Transactions on Programming Languages and Systems (TOPLAS), v.5 n.4, p.554-595, Oct. 1983[doi>10.1145/69575.357227]
Guy L. Steele, Jr., Rabbit: A Compiler for Scheme, Massachusetts Institute of Technology, Cambridge, MA, 1978
STEELE, G. L., JR., AND SUSSMAN, G.J. The revised report on Scheme. AI Memo 452, MIT, Cambridge, Mass., 1978.
TURNER, D.A. A new implementation technique for applicative languages. Softw. Pract. Exper. 9 (1979), 31-49.
D. A. Turner, Miranda: a non-strict functional language with polymorphic types, Proc. of a conference on Functional programming languages and computer architecture, p.1-16, January 1985, Nancy, France
Mitchell Wand, Deriving Target Code as a Representation of Continuation Semantics, ACM Transactions on Programming Languages and Systems (TOPLAS), v.4 n.3, p.496-517, July 1982[doi>10.1145/357172.357179]
S. C. Wray , J. Fairbairn, Non-strict languages-programming and implementation, The Computer Journal, v.32 n.2, p.142-151, April 1989[doi>10.1093/comjnl/32.2.142]
