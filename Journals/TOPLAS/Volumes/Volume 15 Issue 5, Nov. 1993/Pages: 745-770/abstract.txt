Aconcurrent objectis a data structure shared by concurrent processes. Conventional techniques for implementing concurrent objects typically rely oncritical sections; ensuring that only one process at a time can operate on the object. Nevertheless, critical sections are poorly suited for asynchronous systems: if one process is halted or delayed in a critical section, other, nonfaulty processes will be unable to progress. By contrast, a concurrent object implementation islock freeif it always guarantees that some process will complete an operation in a finite number of steps, and it iswait freeif it guarantees thateachprocess will complete an operation in a finite number of steps. This paper  proposes a new methodology for constructing lock-free and  wait-free implementations of concurrent objects. The object's representation and operations are written as stylized sequential programs, with no explicit synchronization. Each sequential operation is atutomatically transformed into a lock-free or wait-free operation using novel synchronization and memory management algorithms. These algorithms are presented for a multiple instruction/multiple data (MIMD) architecture in whichnprocesses communicate by applying atomicread, write, load_linked,andstore_conditionaloperations to a shared memory.