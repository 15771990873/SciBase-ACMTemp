We present practical approximation methods for computing and representing interprocedural aliases for a program written in a language that includes pointers, reference parameters, and recursion. We present the following contributions: (1) a framework for interprocedural pointer alias analysis that handles function pointers by constructing the program call graph while alias analysis is being performed; (2) aflow-sensitiveinterprocedural pointer alias analysis algorithm; (3) aflow-insensitiveinterprocedural pointer alias analysis algorithm; (4) aflow-insensitiveinterprocedural pointer alias analysis algorithm that incorporateskillinformation to improve precision; (5) empirical measurements of the efficiency and  precision of the three interprocedural alias analysis algorithms.