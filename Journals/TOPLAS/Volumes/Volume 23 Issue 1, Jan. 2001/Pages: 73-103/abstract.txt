In this work we investigate the problem of scheduling instructions on idealized microprocessors with multiple pipelines, in the presence of precedence constraints, release-times, deadlines, and latency constraints. A latency oflijspecifies that there must be at leastlijtime-steps between the completion time of instructioniand the start time of instructionj. A latency oflij=−1 can be used to specify thatjmay be scheduled concurrently withibut not earlier. We present a generic algorithm that runs inO(n2logn&agr;(n)+ne) time, givenninstructions andeedges in the precedence DAG, where &agr;(n) is the functional inverse of the Ackermann function. Our algorithm can be used to construct feasible schedules for various classes of instances, including instances with the following   configurations: (1) one pipeline, with individual release-times and deadlines and where the latencies between instructions are restricted to 0 and 1; (2)mpipelines, with individual release-times and deadlines, and monotone-interval order precedences; (3) two pipelines with latencies of −1 or 0, and release-times and deadlines; (4) one pipeline,  latencies of 0 or 1 and individual processing times that are at least one; (5)mpipelines, intree precedences, constant latencies, and deadlines; (6)mpipelines, outtree precedences, constant latencies, and release-times. For instances with deadlines,  optimal schedules that minimize the maximal tardiness can be constructed using binary search, inO(logn) iterations of our algorithm. We obtain our results using backward scheduling, a  very general relaxation method, which extends, unifies, and clarifies many previous results on instruction scheduling for pipelined and parallel machines.