Arvind , Rishiyur S. Nikhil , Keshav Pingali, I-structures: Data structures for parallel computing, Proceedings of the Workshop on Graph Reduction, p.336-369, September 29-October 01, 1986
Henry G. Baker, Jr., List processing in real time on a serial computer, Communications of the ACM, v.21 n.4, p.280-294, April 1978[doi>10.1145/359460.359470]
~BARENDREGT, H. AND VAN LEEUWEN, M. 1985. Functional programming and the language ~TALE. Tech. Rep., Mathematical Inst., Netherlands.
Adrienne Gael Bloss, Path analysis and the optimization of nonstrict functional languages, 1989
Adrienne Bloss , Paul Hudak, Variations on strictness analysis, Proceedings of the 1986 ACM conference on LISP and functional programming, p.132-142, August 1986, Cambridge, Massachusetts, United States[doi>10.1145/319838.319857]
Adrienne Bloss , P. Hudak , J. Young, An optimising compiler for a modern functional language, The Computer Journal, v.32 n.2, p.152-161, April 1989[doi>10.1093/comjnl/32.2.152]
~BURN, G. L, HANKIN, C. L., AND ABRAMSKY, S. 1985. The theory and practice of strictness ~analysis for higher order functions. Tech. Rep. DoC 85/6, Imperial College of Science and ~Technology, Dept. of Computing, U.K.
Luis Damas , Robin Milner, Principal type-schemes for functional programs, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.207-212, January 25-27, 1982, Albuquerque, Mexico[doi>10.1145/582153.582176]
~DRAGHICESCU, M. AND PURUSHOTHAMAN, S. 1990. The destructive update problem in functmnal ~programming. In Proceedzngs of the ACM Conference on LISP and Functional Programming ~ACM, New York.
K. Gopinath, Copy elimination in single assignment languages, Stanford University, Stanford, CA, 1988
K. Gopinath , J. L. Hennessy, Copy elimination in functional languages, Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.303-314, January 11-13, 1989, Austin, Texas, United States[doi>10.1145/75277.75304]
Paul Hudak, Arrays, non-determinism, side-effects, and parallelism: A functional perspective, Proc. of a workshop on Graph reduction, p.312-327, September 1987, Santa Fe, New Mexico, United States
Paul Hudak, A semantic model of reference counting and its abstraction (detailed summary), Proceedings of the 1986 ACM conference on LISP and functional programming, p.351-363, August 1986, Cambridge, Massachusetts, United States[doi>10.1145/319838.319876]
~HUDAK, P. 1984. Alfl reference manual and programmer's guMe. Res. Rep. YALEU/DCS/RR- ~322, 2nd. ed., Yale Univ., New Haven, Conn.
P. Hudak , J. Young, A collecting interpretation of expressions, Proceedings of the 15th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.107-118, January 10-13, 1988, San Diego, California, United States[doi>10.1145/73560.73570]
Paul Hudak , Jonathan Young, Higher-order strictness analysis in untyped lambda calculus, Proceedings of the 13th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.97-109, January 01, 1986, St. Petersburg Beach, Florida[doi>10.1145/512644.512653]
~HUDAK, P., PEYTON JONES, S., AND WADLER, P. 1992. Report on the functional programming ~language Haskel. SIGPLAN Not. 27, (May).
~JOHNSSON, T. 1985. Lambda lifting: Transforming programs to recursive equations.
~KELLER, R. 1983. FEL programmer's guide. Tech. Rep., Univ. of Utah, Salt Lake City, Utah
David Kranz , Norman Adams , Richard Kelsey , Jonathan Rees , Paul Hudak , James Philbin, ORBIT: an optimizing compiler for scheme, ACM SIGPLAN Notices, v.21 n.7, p.219-233, July 1986[doi>10.1145/13310.13333]
~MYCROFT, A. 1981. Abstract interpretatmn and optimizing transformations for applicative ~programs. Ph.D. thesis, Univ. of Edinburgh, Edinburgh, U.K
~NIKHIL, R. S., PINGALI, g., AND ARVIND, 1986 id nouveau. Computation Structures Group ~Memo 265, Massachusetts Inst. of Technology, Lab. for Computer Science, Cambridge, Mass.
John T. O'Donnell, An architecture that efficiently updates associative aggregates in applicative programming languages, Proc. of a conference on Functional programming languages and computer architecture, p.164-189, January 1985, Nancy, France
Jonathan A. Rees , Norman I. Adams IV, T: a dialect of Lisp or LAMBDA: The ultimate software tool, Proceedings of the 1982 ACM symposium on LISP and functional programming, p.114-122, August 15-18, 1982, Pittsburgh, Pennsylvania, United States[doi>10.1145/800068.802142]
~REES, J. A., ADAMS, N. I., AND MEEHAN, J.R. 1984. The T manual. Tech. Rep. 4th ed., Yale ~Univ., New Yaven, Conn.
David A. Schmidt, Denotational semantics: a methodology for language development, William C. Brown Publishers, Dubuque, IA, 1986
~SCHMIDT, D.A. 1986b. Detecting stack-based environments in denotational definitions. Res. ~Rep. TR-CS-86-3, Kansas State Univ., Manhattan, Kan.
David A. Schmidt, Detecting global variables in denotational specifications, ACM Transactions on Programming Languages and Systems (TOPLAS), v.7 n.2, p.299-310, April 1985[doi>10.1145/3318.3323]
Philip Wadler, A new array operation, Proc. of a workshop on Graph reduction, p.328-335, September 1987, Santa Fe, New Mexico, United States
David S. Wise, Matrix algebra and applicative programming, Proc. of a conference on Functional programming languages and computer architecture, p.134-153, October 1987, Portland, Oregon, United States
~YOUNG, J. 1988. Theory and practice of semantics-directed compiling for functional program- ~ming languages. Ph.D. thesis, Yale Univ., Dept. of Computer Science, New Haven, Conn.
