This article presents anescape analysisframework for Java to determine (1) if an object is not reachable after its method of creation returns, allowing the object to be allocated on the stack, and (2) if an object is reachable only from a single thread during its lifetime, allowing unnecessary synchronization operations on that object to be removed. We introduce a new program abstraction for escape analysis, theconnection graph, that is used to establish reachability relationships between objects and object references. We show that the connection graph can be succinctly summarized for each method such that the same summary information may be used in different calling contexts without introducing imprecision into the analysis. We present an interprocedural algorithm that uses the above property to efficiently compute the connection graph and identify the nonescaping objects for methods and threads. The experimental results, from a prototype implementation of our framework in the IBM High Performance Compiler for Java, are very promising. The percentage of objects that may be allocated on the stack exceeds 70&percnt; of all dynamically created objects in the user code in three out of the ten benchmarks (with a median of 19&percnt;); 11&percnt; to 92&percnt; of all mutex lock operations are eliminated in those 10 programs (with a median of 51&percnt;), and the overall execution time reduction ranges from 2&percnt; to 23&percnt; (with a median of 7&percnt;) on a 333-MHz PowerPC workstation with 512 MB memory.