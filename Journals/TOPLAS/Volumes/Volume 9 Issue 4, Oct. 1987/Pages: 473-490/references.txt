Alfred V. Aho , Jeffrey D. Ullman, Principles of Compiler Design (Addison-Wesley series in computer science and information processing), Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1977
BABICH, W. A., AND JAZAYERI, M. The method of attributes for data flow analysis. Acta Inf. 10 (1978), 245-272.
R. G. Cattell, Automatic Derivation of Code Generators from Machine Descriptions, ACM Transactions on Programming Languages and Systems (TOPLAS), v.2 n.2, p.173-190, April 1980[doi>10.1145/357094.357097]
Joost Engelfriet , Gilberto Filé, Passes, Sweeps and Visits, Proceedings of the 8th Colloquium on Automata, Languages and Programming, p.193-207, July 13-17, 1981
G Engels , W Schäfer, Graph grammar engineering: a method used for the development of an integrated programming support environment, Proceedings of the International Joint Conference on Theory and Practice of Software Development (TAPSOFT) on Formal Methods and Software, Vol.2: Colloquium on Software Engineering (CSE), p.179-193, June 1985, Berlin, Germany
Harald Ganzinger, On Storage Optimization for Automatically Generated Compilers, Proceedings of the 4th GI-Conference on Theoretical Computer Science, p.132-141, March 26-28, 1979
GANZlNGER, H. An overview of the attribute definition language ADELE. In Proceedings o{ the 3. GI-Fachgespraech "Compiler-Compiler~. Munich, 1982.
GIEGERICH. g. Introduction to the compiler generating system MUG2. TU Munich, Abteilung ~r Informatik, TUM-Info-7913, 1979.
R. Steven Glanville , Susan L. Graham, A new method for compiler code generation, Proceedings of the 5th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.231-254, January 23-25, 1978, Tucson, Arizona[doi>10.1145/512760.512785]
HECHT, M. S., AND ULLMAN, J.D. A simple algorithm for global data flow analysis problems. SIAMJ. Comput. 4, 4 (1975), 519-532.
KASTENS, U., ET AL. Eine attributierte Grammatik ~r PEARL. Rep. 15/80, Fak. ~r Informatik, Univ. Karlsruhe, 1980.
KASTEN8, U. ET AL. GAG: A practical compiler generator. Lecture Notes in Computer Science, 141. Springer-Verlag, New York, 1982.
Takuya Katayama, Translation of attribute grammars into procedures, ACM Transactions on Programming Languages and Systems (TOPLAS), v.6 n.3, p.345-369, July 1984[doi>10.1145/579.586]
Ken Kennedy , Scott K. Warren, Automatic generation of efficient evaluators for attribute grammars, Proceedings of the 3rd ACM SIGACT-SIGPLAN symposium on Principles on programming languages, p.32-49, January 19-21, 1976, Atlanta, Georgia[doi>10.1145/800168.811538]
KNUTH, D.E. Semantics of context-free languages. Math. Syst. Theor. 2 (1968), 127-145.
KOSTER, C. H. A. ET AL. Syntaktische Beschreibung von CDL2. TU Berlin, Abt. ffir Informatik, 1976.
LEVERETT, B. W. ET AL. An overview of the production-quality compiler-compiler project. Computer 13, 8 (1980), 38-49.
J. Lewi , M. Huybrechts , Vlaminck K. De , J. Huens, A  Programming Methodology in Compiler Construction, Elsevier Science Inc., New York, NY, 1979
D. Neel , M. Amirchahy , Monique Mazaud, Optimization of Generated Code by Means of Attributes: Local Elimination of Common Redandant Sub-Expressions, GI - 4. Jahrestagung, p.247-256, October 09-12, 1974
RICHARDS, M. The BCPL-Programming Manual. Univ. of Cambridge, Cambridge, UK, 1974.
RIPKEN, K. Formale Beschreibung von Maschinen, Implementierungen und optimierender Maschinencodeerzeugung aus attributierten Programmgraphen. TUM-Info-7731, Abteilung t/Jr Informatik, TU Munich, 1977.
Barry K. Rosen, High-level data flow analysis, Communications of the ACM, v.20 n.10, p.712-724, Oct. 1977[doi>10.1145/359842.359849]
SCHRAERMEYER, U. Entwurf und Implementierung einer Eingabesprache ~r ein Compilererzeugendes System auf der Basis funktionaler Grammatiken. Diplomarbeit, Aachen Univ. of Technology, Lehrstuhl ~ Informatik I, 1983.
Stephen Karl Skedzeleski, Definition and use of attribute reevaluation in attributed grammars., 1978
SONNENSCHEIN, M. Entwurf und Implementierung yon Attributauswertungalgorithmen und insbesondere von Treewalk-Evaluatoren im Rahmen eines Compilererzeugenden Systems. Diplomarbeit, Aachen Univ. of Technology, Lohrstuhl fiir Angew. Mathematik insbesondere Informatik, 1979.
SONNENSCHEIN, M. Generierung effizienter Compilerteile dutch attributierten Grammatiken verwandte Konzepte. Ph.D. dissertation, Lehrstuhl f/ir Informatik I, Aachen Univ. of Technology, 1983.
Michael Sonnenschein, Global storage cells for attributes in an attribute grammar, Acta Informatica, v.22 n.4, p.397-420, Oct. 1985[doi>10.1007/BF00288775]
Tim Teitelbaum , Thomas Reps, The Cornell program synthesizer: a syntax-directed programming environment, Communications of the ACM, v.24 n.9, p.563-573, Sept. 1981[doi>10.1145/358746.358755]
J. Uhl, An  Attribute Grammar for the Semantic Analysis of ADA, Springer-Verlag New York, Inc., Secaucus, NJ, 1982
U.S. DEPARTMENT OF DEFENSE. Ada Programming Language. ANSI/MIL-STD 1815A, Washington, D.C., 1983.
