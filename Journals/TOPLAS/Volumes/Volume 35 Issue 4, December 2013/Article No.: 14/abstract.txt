Reachability from a program variablevto a program variablewstates that fromv, it is possible to follow a path of memory locations that leads to the object bound tow. We present a new abstract domain for the static analysis of possible reachability between program variables or, equivalently, definite unreachability between them. This information is important for improving the precision of other static analyses, such as side-effects, field initialization, cyclicity and path-length analysis, as well as more complex analyses built upon them, such as nullness and termination analysis. We define and prove correct our reachability analysis for Java bytecode, defined as a constraint-based analysis, where the constraint is a graph whose nodes are the program points and whose arcs propagate reachability information in accordance to the abstract semantics of each bytecode instruction. For each program pointp, our reachability analysis produces an overapproximation of the ordered pairs of variables 〈v,w〉 such thatvmight reachwatp. Seen the other way around, if a pair 〈v,w〉 is not present in the overapproximation atp, thenvdefinitely does not reachwatp. We have implemented the analysis inside the Julia static analyzer. Our experiments of analysis of nontrivial Java and Android programs show the improvement of precision due to the presence of reachability information. Moreover, reachability analysis actually reduces the overall cost of nullness and termination analysis.