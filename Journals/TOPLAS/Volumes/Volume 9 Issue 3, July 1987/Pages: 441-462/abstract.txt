John Backus introduced the Functional Programming (FP) system, the variable-free applicative system having reduction semantics. Backus has also introduced a unique expansion technique for reasoning about a class of recursive FP programs. As a natural outgrowth of this expansion technique, an FP program synthesis methodology is described in this paper.The methodology synthesizes recursive FP programs of the formf=pâ†’,q;E(f.h) from their preformulated case-by-case descriptions, which in turn come from given input-output example specifications. After explaining the methodology informally, formalization in the form of a definition and a synthesis theorem is introduced. A sufficient condition for the functional formE, for successful synthesis under the present methodology, is obtained structurally. Several illustrative examples of synthesis are also included.