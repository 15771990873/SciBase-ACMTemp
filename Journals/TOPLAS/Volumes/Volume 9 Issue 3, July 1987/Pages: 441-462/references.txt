John Backus, Programming language semantics and closed applicative languages, Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.71-86, October 01-03, 1973, Boston, Massachusetts[doi>10.1145/512927.512934]
John Backus, Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs, Communications of the ACM, v.21 n.8, p.613-641, Aug. 1978[doi>10.1145/359576.359579]
John Backus, The Algebra of Functional Programs: Function Level Reasoning, Linear Equations, and Extended Definitions, Proceedings of the International Colloquium on Formalization of Programming Concepts, p.1-43, April 19-25, 1981
BACKUS, J. Is computer science based on the wrong fundamental concept of "program"? An extended concept. In Algorithmic Languages, J. W. de Bakker, and J'. C. van Vliet, Eds. North- Holland, Amsterdam, 133-165.
John Backus, Function level programs as mathematical objects, Proceedings of the 1981 conference on Functional programming languages and computer architecture, p.1-10, October 18-22, 1981, Portsmouth, New Hampshire, USA[doi>10.1145/800223.806757]
BACKUS, J. Functional-level computing. IEEE Spectrum 19, 8 (Aug. 1982), 22-27.{
J Backus, From function level semantics to program transformation and optimization, Proc. of the international joint conference on theory and practice of software development (TAPSOFT) Berlin, March 25-29, 1985 on Mathematical foundations of software development, Vol. 1: Colloquium on trees in algebra and programming (CAAP'85), p.60-91, April 1985, Berlin, Germany
BANERJEE, D. Solving and transforming a class of non-linear FP equations. Communication to ACM Trans. Program. Lang. Syst.
BIERMANN, A. W., AND KRISHNASWAMY, R. Constructing programs from example computations. IEEE Trans. Softw. Eng. 2, 5 (Sep. 1976), 141-153.
BIERMANN, A.W. The inference of regular LISP programs from examples. IEEE Trans. Syst. Man Cybern. 8, 8 (Aug. 1978), 585-600.
BURGE, W.H. Recursive Programming Techniques. Addison-Wesley, Reading, Mass., 1975.
BURSTALL, R.M. Proving properties of programs by structural induction. Computer J. 12, 1 (Feb. 1969), 41-48.
C. C Green , Richard J. Waldinger , David R. Barstow , Robert A. Elschlager , Douglas B. Lenat , Brian P. McCune , David E. Shaw , Louis I. Steinberg, Progress report on program-understanding systems., Stanford University, Stanford, CA, 1974
HARDY, S. Synthesis of LISP functions from examples. In Proceedings o{ the 4th International Joint Con{erence on Arti{icial Intelligence (Georgia, USSR, 1975), Artificial Intelligence Laboratory, MIT, Cambridge, Mass., pp. 240-245.
JOUNNAUD, J. P., AND GUIHO, G. Inference of functions with an interactive system. In Machine Intelligence 9, J. E. Hayes, D. Michie, and L. I. Mikulich, Eds. Ellis Horwood, Chichester, England, 1979, 227-250.
KOORATOFF, Y. A class of functions synthesized from a finite number of examples and a LISP program scheme. Int. J. Comput. In{. Sci. 8, 6 (Dec. 1979), 489-521.
Zohar Manna, Mathematical Theory of Computation, Dover Publications, Incorporated, 2003
Dana S. Scott, Logic and programming languages, Communications of the ACM, v.20 n.9, p.634-641, Sept. 1977[doi>10.1145/359810.359826]
Joseph E. Stoy, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory, MIT Press, Cambridge, MA, 1977
Phillip D. Summers, A Methodology for LISP Program Construction from Examples, Journal of the ACM (JACM), v.24 n.1, p.161-175, Jan. 1977[doi>10.1145/321992.322002]
John H. Williams, On the Development of the Algebra of Functional Programs, ACM Transactions on Programming Languages and Systems (TOPLAS), v.4 n.4, p.733-757, Oct. 1982[doi>10.1145/69622.357193]
WILLIAMS, J.H. Notes on the FP style of functional programming. In Functional Programming and Its Applications, J. Darlington, P. Henderson, and D. A. Turner, Eds. Cambridge University Press, Cambridge, England, 1982, 73-101.
