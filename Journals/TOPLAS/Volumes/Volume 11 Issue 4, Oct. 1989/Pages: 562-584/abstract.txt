LetGbe a connected undirected graph in which each node corresponds to a process and two nodes are connected by an edge if the corresponding processes share a resource. We consider distributed computations in which processes are constantly demanding all of their resources in order to operate, and in which neighboring processes may not operate concurrently. We advocate that such a system is general enough for representing a large class of resource-sharing systems under heavy load.We employ a distributed scheduling mechanism based on acyclic orientations ofGand investigate the amount of concurrency that it provides. We show that this concurrency is given by a number akin toG's chromatic and multichromatic numbers, and that, among scheduling schemes which require neighbors inGto alternate in their turns to operate, ours is the one that potentially provides the greatest concurrency. However, we also show that the decision problem corresponding to optimizing concurrency isNP-complete.