Several related notions of the productivity are presented for functional languages with lazy evaluation. The notion of productivity captures the idea of computability, of progress of infinite-list programs. If an infinite-list program isproductive, then every element of the list can be computed in finite “time.” These notions are used to study recursive list definitions, that is, lists defined bylwherel=fl. Sufficient conditions are given in terms of the functionfthat either guarantee the productivity of the list or its unproductivity. Furthermore, a calculus is developed that can be used in verifying that lists defined bylwherel<=f Iare productive. The power and the usefulness of our theory are demonstrated by several nontrivial examples. Several observations are given in conclusion.