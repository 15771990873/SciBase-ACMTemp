Recent work in history-based branch prediction uses novel hardware structures to capture branch correlation and increase branch prediction accuracy.Branch correlationoccurs when the outcome of a conditional branch can be accurately predicted by observing the outcomes of previously executed branches in the dynamic instruction stream. In this article, we show how to instrument a program so that it is practical to collect run-time statistics that indicate where branch correlation occurs, and we then show how to use these statistics to transform the program so that its static branch prediction accuracy is improved. The run-time information that we gather is called apath profile, and it summarizes how often each executed sequence of program points occurs in the program trace. Our path  proles are more general than those previously proposed. The code transformation that we present is calledstatic correlated branch prediction(SCBP). It exhibits better branch prediction accuracy than previously thought possible for static prediction techniques. Furthermore, through the use of an overpruning heuristic, we show that it is possible to determine automatically an appropriate trade-off between code expansion and branch predictability so that our transformation improves the performance of multiple-issue, deeply pipelined microprocessors like those being built today.