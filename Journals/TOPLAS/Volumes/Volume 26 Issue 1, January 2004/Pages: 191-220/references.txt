Lars Ole Andersen, Binding-time analysis and the taming of C pointers, Proceedings of the 1993 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation, p.47-58, June 14-16, 1993, Copenhagen, Denmark[doi>10.1145/154630.154636]
Andersen, L. O. 1994. Program analysis and specialization for the C programming language. DIKU Rep. 94/19. Department of Computer Science, University of Copenhagen, Copenhagen, Denmark.
Asai, K. 1999. Binding-time analysis for both static and dynamic expressions. In Static Analysis. Proceedings, A. Cortesi and G. Filé, Eds. Lecture Notes in Computer Science, vol. 1694. Springer-Verlag, Berlin, Germany, 117--133.
J. Michael Ashley , Charles Consel, Fixpoint computation for polyvariant static analyses of higher-order applicative programs, ACM Transactions on Programming Languages and Systems (TOPLAS), v.16 n.5, p.1431-1448, Sept. 1994[doi>10.1145/186025.186037]
Beckman, L., Haraldson, A., Oskarsson, Ö., and Sandewall, E. 1976. A partial evaluator and its use as a programming tool. Artific. Intell. 7, 319--357.
Anders Bondorf, Improving binding times without explicit CPS-conversion, Proceedings of the 1992 ACM conference on LISP and functional programming, p.1-10, June 22-24, 1992, San Francisco, California, USA[doi>10.1145/141471.141483]
Bondorf, A. 1993. Similix 5.0 Manual. DIKU, University of Copenhagen, Copenhagen, Denmark. Included in the Similix distribution (http://www.diku.dk/forskning/topps/activities/similix.html), 82 pages.
Anders Bondorf , Olivier Danvy, Automatic autoprojection of recursive equations with global variable and abstract data types, Science of Computer Programming, v.16 n.2, p.151-195, Sept. 1991[doi>10.1016/0167-6423(91)90002-F]
Bulyonkov, M. A. 1984. Polyvariant mixed computation for analyzer programs. Acta Informatica 21, 473--484.
Mikhail A. Bulyonkov, Extracting polyvariant binding time analysis from polyvariant specializer, Proceedings of the 1993 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation, p.59-65, June 14-16, 1993, Copenhagen, Denmark[doi>10.1145/154630.154637]
Chin-Liang Chang , Richard Char-Tung Lee, Symbolic Logic and Mechanical Theorem Proving, Academic Press, Inc., Orlando, FL, 1997
Christensen, N. H., Glück, R., and Laursen, S. 2000. Binding-time analysis in partial evaluation: One size does not fit all. In Perspectives of System Informatics. Proceedings, D. Bjørner, M. Broy, and A. V. Zamulin, Eds. Lecture Notes in Computer Science, vol. 1755. Springer-Verlag, Berlin, Germany, 80--92.
Charles Consel, Polyvariant binding-time analysis for applicative languages, Proceedings of the 1993 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation, p.66-77, June 14-16, 1993, Copenhagen, Denmark[doi>10.1145/154630.154638]
Charles Consel , Olivier Danvy, For a better support of static data flow, Proceedings of the 5th ACM conference on Functional programming languages and computer architecture, p.496-519, June 1991, Cambridge, Massachusetts, USA
Charles Consel , Olivier Danvy, Static and dynamic semantics processing, Proceedings of the 18th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.14-24, January 21-23, 1991, Orlando, Florida, USA[doi>10.1145/99583.99588]
Charles Consel , Luke Hornof , François Noël , Jacques Noyé , Nicolae Volansche, A Uniform Approach for Compile-Time and Run-Time Specialization, Selected Papers from the Internaltional Seminar on Partial Evaluation, p.54-72, February 12-16, 1996
Consel, C. and Khoo, S.-C. 1995. On-line and off-line partial evaluation: semantic specifications and correctness proofs. J. Funct. Programm. 5, 4, 461--500.
Ershov, A. P. 1977. On the partial computation principle. Inform. Process. Lett. 6, 2, 38--41.
Yoshihiko Futamura, Partial Evaluation of Computation Process—AnApproach to a Compiler-Compiler, Higher-Order and Symbolic Computation, v.12 n.4, p.381-391, December 1999[doi>10.1023/A:1010095604496]
Futamura, Y. and Nogi, K. 1988. Generalized partial computation. In Partial Evaluation and Mixed Computation, D. Bjørner, A. P. Ershov, and N. D. Jones, Eds. North-Holland, Amsterdam, The Netherlands, 133--151.
Glenstrup, A., Makholm, H., and Secher, J. P. 1999. C-Mix: specialization of C programs. In Partial Evaluation. Practice and Theory, J. Hatcliff, T. Mogensen, and P. Thiemann, Eds. Lecture Notes in Computer Science, vol. 1706. Springer-Verlag, Berlin, Germany, 108--153.
Arne J. Glenstrup , Neil D. Jones, BTA Algorithms to Ensure Termination of Off-Line Partial Evaluation, Proceedings of the Second International Andrei Ershov Memorial Conference on Perspectives of System Informatics, p.273-284, June 25-28, 1996
Robert Glück, Jones optimality, binding-time improvements, and the strength of program specializers, Proceedings of the ASIAN symposium on Partial evaluation and semantics-based program manipulation, p.9-19, September 12-14, 2002, Aizu, Japan[doi>10.1145/568173.568175]
Glück, R. and Jørgensen, J. 1994. Generating optimizing specializers. In Proceedings of the IEEE International Conference on Computer Languages. IEEE Computer Society Press, Los Alamitos, CA, 183--194.
Robert Glück , Andrei V. Klimov, Occam's Razor in Metacompuation: the Notion of a Perfect Process Tree, Proceedings of the Third International Workshop on Static Analysis, p.112-123, September 22-24, 1993
Robert Glück , Morten Heine Sørensen, Partial Deduction and Driving are Equivalent, Proceedings of the 6th International Symposium on Programming Language Implementation and Logic Programming, p.165-181, September 14-16, 1994
Robert Glück , Morten Heine Sørensen, A Roadmap to Metacomputation by Supercompilation, Selected Papers from the Internaltional Seminar on Partial Evaluation, p.137-160, February 12-16, 1996
Gomard, C. K. and Jones, N. D. 1991. Compiler generation by partial evaluation: A case study. Struct. Programm. 12, 123--144.
Hatcliff, J. 1999. An introduction to online and offline partial evaluation using a simple flowchart language. In Partial Evaluation. Practice and Theory, J. Hatcliff, T. Mogensen, and P. Thiemann, Eds. Lecture Notes in Computer Science, vol. 1706. Springer-Verlag, Berlin, Germany, 20--82.
John Hatcliff , Matthew B. Dwyer , Shawn Laubach, Staging Static Analyses Using Abstraction-Based Program Specialization, Proceedings of the 10th International Symposium on Principles of Declarative Programming, p.134-151, September 16-18, 1998
Luke Hornof , Jacques Noyé, Accurate binding-time analysis for imperative languages: flow, context, and return sensitivity, Theoretical Computer Science, v.248 n.1-2, p.3-27, October 2000[doi>10.1016/S0304-3975(00)00048-7]
Jones, N. D. 1988. Automatic program specialization: A re-examination from basic principles. In Partial Evaluation and Mixed Computation, D. Bjørner, A. P. Ershov, and N. D. Jones, Eds. North-Holland, Amsterdam, The Netherlands, 225--282.
Neil D. Jones , Arne J. Glenstrup, Program Generation, Termination, and Binding-Time Analysis, Proceedings of the 1st ACM SIGPLAN/SIGSOFT conference on Generative Programming and Component Engineering, p.1-31, October 06-08, 2002
Neil D. Jones , Carsten K. Gomard , Peter Sestoft, Partial evaluation and automatic program generation, Prentice-Hall, Inc., Upper Saddle River, NJ, 1993
Neil D. Jones , Peter Sestoft , Harald Sondergaard, An experiment in partial evaluation: the generation of a compiler generator, Proc. of the first international conference on Rewriting techniques and applications, p.124-140, May 20-22, 1985, Dijon, France
Jones, N. D., Sestoft, P., and Søndergaard, H. 1989. Mix: A self-applicable partial evaluator for experiments in compiler generation. LISP Symbol. Computat. 2, 1, 9--50.
Paul Kleinrubatscher , Albert Kriegshaber , Robert Zöchling , Robert Glück, Fortran program specialization, ACM SIGPLAN Notices, v.30 n.4, p.61-70, April 1995[doi>10.1145/202176.202184]
Julia L. Lawall , Olivier Danvy, Continuation-based partial evaluation, Proceedings of the 1994 ACM conference on LISP and functional programming, p.227-238, June 27-29, 1994, Orlando, Florida, USA[doi>10.1145/182409.182483]
J. W. Lloyd , J. C. Shepherdson, Partial evaluation in logic programming, Journal of Logic Programming, v.11 n.3-4, p.217-242, Oct./Nov. 1991[doi>10.1016/0743-1066(91)90027-M]
Ron Cytron , Renaud Marlet, Tempo, a program specializer for C (Panel Session), ACM SIGPLAN Notices, v.35 n.7, p.76-77, July 2000[doi>10.1145/351403.351424]
Masuhara, H. and Yonezawa, A. 2001. Run-time bytecode specialization: A portable approach to generating optimized specialized code. In Programs as Data Objects. Proceedings, O. Danvy and A. Filinski, Eds. Lecture Notes in Computer Science, vol. 2053. Springer-Verlag, Berlin, Germany, 138--154.
Uwe Meyer, Techniques for partial evaluation of imperative languages, Proceedings of the 1991 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation, p.94-105, June 17-19, 1991, New Haven, Connecticut, USA[doi>10.1145/115865.115876]
Uwe Meyer, Correctness of on-line partial evaluation for a Pascal-like language, Science of Computer Programming, v.34 n.1, p.55-73, April 1999[doi>10.1016/S0167-6423(98)00015-X]
Romanenko, S. A. 1988. A compiler generator produced by a self-applicable specializer can have a surprisingly natural and understandable structure. In Partial Evaluation and Mixed Computation, D. Bjørner, A. P. Ershov, and N. D. Jones, Eds. North-Holland, Amsterdam, The Netherlands, 445--463.
Ruf, E. 1993. Topics in online partial evaluation. Tech. Rep. CSL-TR-93-563. Stanford University, Computer Systems Laboratory, Stanford, CA.
Ruf, E. and Weise, D. 1993. On the specialization of online program specializers. J. Funct. Programm. 3, 3, 251--281.
Rytz, B. and Gengler, M. 1992. A polyvariant binding time analysis. In Proceedings of the Workshop on Partial Evaluation and Semantics-Based Program Manipulation. Yale University, Deptartment of Computer Science, New Haven, CT, 21--28.
Schultz, U. P. 2001. Partial evaluation for class-based object-oriented languages. In Programs as Data Objects. Proceedings, O. Danvy and A. Filinski, Eds. Lecture Notes in Computer Science, vol. 2053. Springer-Verlag, Berlin, Germany, 173--197.
Sørensen, M. H., Glück, R., and Jones, N. D. 1996. A positive supercompiler. J. Funct. Programm. 6, 6, 811--838.
Michael Sperber , Robert Glück , Peter Thiemann, Bootstrapping higher-order program transformers from interpreters, Proceedings of the 1996 ACM symposium on Applied Computing, p.408-413, February 17-19, 1996, Philadelphia, Pennsylvania, USA[doi>10.1145/331119.331417]
Eijiro Sumii , Naoki Kobayashi, Online-and-offline partial evaluation (extended abstract): a mixed approach, Proceedings of the 2000 ACM SIGPLAN workshop on Partial evaluation and semantics-based program manipulation, p.12-21, January 22-23, 2000, Boston, Massachusetts, USA[doi>10.1145/328690.328694]
Peter Thiemann , Michael Sperber, Polyvariant Expansion and Compiler Generators, Proceedings of the Second International Andrei Ershov Memorial Conference on Perspectives of System Informatics, p.285-296, June 25-28, 1996
Valentin F. Turchin, The concept of a supercompiler, ACM Transactions on Programming Languages and Systems (TOPLAS), v.8 n.3, p.292-325, July 1986[doi>10.1145/5956.5957]
Daniel Weise , Roland Conybeare , Erik Ruf , Scott Seligman, Automatic online partial evaluation, Proceedings of the 5th ACM conference on Functional programming languages and computer architecture, p.165-191, June 1991, Cambridge, Massachusetts, USA
