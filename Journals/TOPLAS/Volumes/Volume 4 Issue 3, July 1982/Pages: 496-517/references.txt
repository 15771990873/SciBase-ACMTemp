John Backus, Programming language semantics and closed applicative languages, Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.71-86, October 01-03, 1973, Boston, Massachusetts[doi>10.1145/512927.512934]
The Vienna Development Method: The Meta-Language, January 1978
R. M. Burstall , John Darlington, A Transformation System for Developing Recursive Programs, Journal of the ACM (JACM), v.24 n.1, p.44-67, Jan. 1977[doi>10.1145/321992.321996]
BURSTALL, R.M., AND LANmN, P.J. Programs and their proofs: An algebraic approach. In Machine Intelligence, vol. 4, B. Meltzer and D. Michie (Eds.). Elsevier North-Holland, New York, 1969, pp. 17-44.
J. A. Goguen , J. W. Thatcher , E. G. Wagner , J. B. Wright, Initial Algebra Semantics and Continuous Algebras, Journal of the ACM (JACM), v.24 n.1, p.68-95, Jan. 1977[doi>10.1145/321992.321997]
HOARE, C.A.R. Proving correctness of data representations. Acta Inf. 1, 4 (1972), 271-281.
Neil D. Jones , David A. Schmidt, Compiler generation from denotational semantics, Semantics-Directed Compiler Generation, Proceedings of a Workshop, p.70-93, January 14-18, 1980
Donald E. Knuth, The art of computer programming, volume 1 (3rd ed.): fundamental algorithms, Addison Wesley Longman Publishing Co., Inc., Redwood City, CA, 1997
LANDIN, P.J. The mechanical evaluation of expressions. Computer J. 6, 4 (Jan. 1964), 308-320.
MCCARTHY, J. Towards a mathematical science of computation. Information Processing 62, C.M. PoppleweU (Ed.) Elsevier North-Holland, New York, 1963, pp. 21-28.
MCCARTHY, J., ANO PAINTER, J. Correctness of a compiler for arithmetic expressions. In Mathematical Aspects of Computer Science, vol. 19: Proceedings of Symposium in Applied Mathematics, J.T. Schwartz (Ed.) American Mathematical Society, Providence, R.I., 1967, pp. 33-41.
Robert Milne , C. Strachey, A  Theory of Programming Language Semantics, Halsted Press, New York, NY, 1977
MILNER, R., AND WEYHRAUCH, R. Proving compiler correctness in a mechanized logic. In Machine Intelligence, vol. 7, B. Meltzer and D. Michie (Eds.). Edinburgh University Press, Edinburgh, Scotland, 1972, pp. 51-72.
James H. Morris, Jr. , Ben Wegbreit, Subgoal induction, Communications of the ACM, v.20 n.4, p.209-222, April 1977[doi>10.1145/359461.359466]
F. Lockwood Morris, Advice on structuring compilers and proving them correct, Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.144-152, October 01-03, 1973, Boston, Massachusetts[doi>10.1145/512927.512941]
Peter D. Mosses, A Constructive Approach to Compiler Correctness, Proceedings of the 7th Colloquium on Automata, Languages and Programming, p.449-469, July 14-18, 1980
PLOTKIN, G.D. LCF considered as a programming language. Theor. Comput. Sci. 5, 3 (Dec. 1977), 223-255.
T. W. Pratt, Programming languages: design and implementation (2nd ed.), Prentice-Hall, Inc., Upper Saddle River, NJ, 1983
QUlNE, W.V.O. Word and Object. M.I.T. Press, Cambridge, Mass., 1960.
John C. Reynolds, On the Relation between Direct and Continuation Semantics, Proceedings of the 2nd Colloquium on Automata, Languages and Programming, p.141-156, July 29-August 02, 1974
John C. Reynolds, Definitional interpreters for higher-order programming languages, Proceedings of the ACM annual conference, p.717-740, August 01-01, 1972, Boston, Massachusetts, United States[doi>10.1145/800194.805852]
SETm, R. Circular expressions: A progress report on semantics-directed compiler generation. In Lecture Notes in Computer Science, vol. 115: Automata, Languages, and Programming, 8th Colloquium, Acre, Israel, July 13-17, 1981, S. Even and O. Kariv (Eds.). Springer-Verlag, New York, 1981.
Ravi Sethi , Adrian Tang, Constructing Call-by-Value Continuation Semantics, Journal of the ACM (JACM), v.27 n.3, p.580-597, July 1980[doi>10.1145/322203.322216]
Guy Lewis Steele, Jr. , Gerald Jay Sussman, The dream of a lifetime: A lazy variable extent mechanism, Proceedings of the 1980 ACM conference on LISP and functional programming, p.163-172, August 25-27, 1980, Stanford University, California, United States[doi>10.1145/800087.802802]
Guy Lewis Steele, Jr. , Gerald Jay Sussman, Design of a LISP-based microprocessor, Communications of the ACM, v.23 n.11, p.628-645, Nov. 1980[doi>10.1145/359024.359031]
STOY, J.E. The congruence of two programming language definitions. Theor. Comput. Sci. 13 (1981), 151-174.
Joseph E. Stoy, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory, MIT Press, Cambridge, MA, 1977
Gerald J. Sussman , Guy L. Steele, Jr., An Interpreter for Extended Lambda Calculus, Massachusetts Institute of Technology, Cambridge, MA, 1975
Andrew S. Tanenbaum, Structured computer organization (3rd ed.), Prentice-Hall, Inc., Upper Saddle River, NJ, 1989
R. D. Tennent, The denotational semantics of programming languages, Communications of the ACM, v.19 n.8, p.437-453, Aug. 1976[doi>10.1145/360303.360308]
James W. Thatcher , Eric G. Wagner , Jesse B. Wright, More on Advice on Structuring Compilers and Proving Them Correct, Proceedings of the 6th Colloquium, on Automata, Languages and Programming, p.596-615, July 16-20, 1979
TURNER, D.A. A new implementation technique for applicative languages. Softw. Pract. Exper. 9 (1979), 31-49.
Mitchell Wand, Semantics-directed machine architecture, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.234-241, January 25-27, 1982, Albuquerque, Mexico[doi>10.1145/582153.582179]
WANO, M. First-order identities as a defining language. Acta Inf. 14 (1980), 337-357.
WANI), M. SCHEME version 3.1 reference manual. Tech. Rep. 93, Computer Science Dep., Indiana Univ., June 1980.
Mitchell Wand, Continuation-Based Program Transformation Strategies, Journal of the ACM (JACM), v.27 n.1, p.164-180, Jan. 1980[doi>10.1145/322169.322183]
