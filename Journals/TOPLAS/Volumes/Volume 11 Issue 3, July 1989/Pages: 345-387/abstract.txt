The need to integrate several versions of a program into a common one arises frequently, but it is a tedious and time consuming task to integrate programs by hand. To date, the only available tools for assisting with program integration are variants oftext-baseddifferential file comparators; these are of limited utility because one has no guarantees about how the program that is the product of an integration behaves compared to the programs that were integrated.This paper concerns the design of asemantics-basedtool for automatically integrating program versions. The main contribution of the paper is an algorithm that takes as input three programsA,B, andBase, whereAandBare two variants ofBase. Whenever the changes made toBaseto createAandBdo not “interfere” (in a sense defined in the paper), the algorithm produces a programMthat integratesAandB. The algorithm is predicated on the assumption that differences in thebehaviorof the variant programs from that ofBase, rather than differences in thetext, are significant and must be preserved inM. Although it is undecidable whether a program modification actually leads to such a difference, it is possible to determine a safe approximation by comparing each of the variants withBase. To determine this information, the integration algorithm employs a program representation that is similar (although not identical) to thedependence graphsthat have been used previously in vectorizing and parallelizing compilers. The algorithm also makes use of the notion of aprogram sliceto find just those statements of a program that determine the values of potentially affected variables.The program-integration problem has not been formalized previously. It should be noted, however, that the integration problem examined here is a greatly simplified one; in particular, we assume that expressions contain only scalar variables and constants, and that the only statements used in programs are assignment statements, conditional statements, and while-loops.