This article describes the design and implementation of a system, called TSL(for Transformer Specification Language), that provides a systematic solution to the problem of creating retargetable tools for analyzing machine code. TSLis a tool generator---that is, a metatool---that automatically creates different abstract interpreters for machine-code instruction sets.The most challenging technical issue that we faced in designing TSLwas how to automate the generation of the set ofabstract transformersfor a given abstract interpretation of a given instruction set. From a description of theconcrete operational semanticsof an instruction set, together with the datatypes and operations that define an abstract domain, TSLautomatically creates the set of abstract transformers for the instructions of the instruction set. TSLadvances the state-of-the-art in program analysis because it provides two dimensions of parameterizability: (i) a given analysis component can be retargeted to different instruction sets; (ii) multiple analysis components can be created automatically from a single specification of the concrete operational semantics of the language to be analyzed.TSLis anabstract-transformer-generator generator. The article describes the principles behind TSL, and discusses how one uses TSLto develop different abstract interpreters.