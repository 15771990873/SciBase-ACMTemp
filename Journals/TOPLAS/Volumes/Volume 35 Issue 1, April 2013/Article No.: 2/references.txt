Martin Abadi , Luca Cardelli, A  Theory of Objects, Springer-Verlag New York, Inc., Secaucus, NJ, 1996
Amal Ahmed, Step-Indexed syntactic logical relations for recursive and quantified types, Proceedings of the 15th European conference on Programming Languages and Systems, p.69-83, March 27-28, 2006, Vienna, Austria[doi>10.1007/11693024_6]
Amal Ahmed , Matthew Fluet , Greg Morrisett, A step-indexed model of substructural state, Proceedings of the tenth ACM SIGPLAN international conference on Functional programming, September 26-28, 2005, Tallinn, Estonia[doi>10.1145/1086365.1086376]
Davide Ancona , Elena Zucca, A theory of mixin modules: basic and derived operators, Mathematical Structures in Computer Science, v.8 n.4, p.401-446, August 1998[doi>10.1017/S0960129598002576]
Davide Ancona , Elena Zucca, A calculus of module systems, Journal of Functional Programming, v.12 n.2, p.91-132, March 2002[doi>10.1017/S0956796801004257]
Davide Ancona , Sonia Fagorzi , Eugenio Moggi , Elena Zucca, Mixin modules and computational effects, Proceedings of the 30th international conference on Automata, languages and programming, June 30-July 04, 2003, Eindhoven, The Netherlands
Andrew W. Appel , David McAllester, An indexed model of recursive types for foundational proof-carrying code, ACM Transactions on Programming Languages and Systems (TOPLAS), v.23 n.5, p.657-683, September 2001[doi>10.1145/504709.504712]
Gilad Bracha , William Cook, Mixin-based inheritance, Proceedings of the European conference on object-oriented programming on Object-oriented programming systems, languages, and applications, p.303-311, September 1990, Ottawa, Canada[doi>10.1145/97945.97982]
Bracha, G. and Lindstrom, G. 1992. Modularity meets inheritance. InProceedings of the International Conference on Computer Languages (ICCL’92). IEEE.
Gilad Bracha , Peter von der Ahé , Vassili Bykov , Yaron Kashai , William Maddox , Eliot Miranda, Modules as objects in newspeak, Proceedings of the 24th European conference on Object-oriented programming, June 21-25, 2010, Maribor, Slovenia
Karl Crary , Robert Harper , Sidd Puri, What is a recursive module?, Proceedings of the ACM SIGPLAN 1999 conference on Programming language design and implementation, p.50-63, May 01-04, 1999, Atlanta, Georgia, USA[doi>10.1145/301618.301641]
Vincent Cremet , François Garillot , Sergueï Lenglet , Martin Odersky, A core calculus for scala type checking, Proceedings of the 31st international conference on Mathematical Foundations of Computer Science, August 28-September 01, 2006, Stará Lesná, Slovakia[doi>10.1007/11821069_1]
Derek Dreyer, A type system for well-founded recursion, Proceedings of the 31st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.293-305, January 14-16, 2004, Venice, Italy[doi>10.1145/964001.964026]
Derek Dreyer , Robert Harper , Karl Crary, Understanding and evolving the ml module system, Carnegie Mellon University, Pittsburgh, PA, 2005
DEREK DREYER, Recursive type generativity, Journal of Functional Programming, v.17 n.4-5, p.433-471, July 2007[doi>10.1017/S0956796807006429]
Derek Dreyer, A type system for recursive modules, Proceedings of the 12th ACM SIGPLAN international conference on Functional programming, October 01-03, 2007, Freiburg, Germany[doi>10.1145/1291151.1291196]
Derek Dreyer , Andreas Rossberg, Mixin' up the ML module system, Proceedings of the 13th ACM SIGPLAN international conference on Functional programming, September 20-28, 2008, Victoria, BC, Canada[doi>10.1145/1411204.1411248]
Derek Dreyer , Karl Crary , Robert Harper, A type system for higher-order modules, Proceedings of the 30th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.236-249, January 15-17, 2003, New Orleans, Louisiana, USA[doi>10.1145/604131.604151]
Derek Dreyer , Robert Harper , Manuel M. T. Chakravarty , Gabriele Keller, Modular type classes, Proceedings of the 34th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages, January 17-19, 2007, Nice, France[doi>10.1145/1190216.1190229]
Dominic Duggan, Type-Safe linking with recursive DLLs and shared libraries, ACM Transactions on Programming Languages and Systems (TOPLAS), v.24 n.6, p.711-804, November 2002[doi>10.1145/586088.586093]
Dominic Duggan , Constantinos Sourelis, Mixin modules, Proceedings of the first ACM SIGPLAN international conference on Functional programming, p.262-273, May 24-26, 1996, Philadelphia, Pennsylvania, USA[doi>10.1145/232627.232654]
Matthew Flatt , Matthias Felleisen, Units: cool modules for HOT languages, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation, p.236-248, June 17-19, 1998, Montreal, Quebec, Canada[doi>10.1145/277650.277730]
Harper, R. 2011.Programming in Standard ML. Working draft, Carnegie Mellon University, Pittsburgh, PA.
Robert Harper , Mark Lillibridge, A type-theoretic approach to higher-order modules with sharing, Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.123-137, January 16-19, 1994, Portland, Oregon, USA[doi>10.1145/174675.176927]
Robert Harper , John C. Mitchell, On the type structure of standard ML, ACM Transactions on Programming Languages and Systems (TOPLAS), v.15 n.2, p.211-252, April 1993[doi>10.1145/169701.169696]
Harper, R. and Pierce, B. C. 2005. Design considerations for ML-style module systems. InAdvanced Topics in Types and Programming Languages, B. C. Pierce Ed., MIT Press, Cambridge, MA.
Robert Harper , Christopher Stone, A type-theoretic interpretation of standard ML, Proof, language, and interaction: essays in honour of Robin Milner, MIT Press, Cambridge, MA, 2000
Robert Harper , John C. Mitchell , Eugenio Moggi, Higher-order modules and the phase distinction, Proceedings of the 17th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.341-354, December 1989, San Francisco, California, USA[doi>10.1145/96709.96744]
Tom Hirschowitz , Xavier Leroy, Mixin modules in a call-by-value setting, ACM Transactions on Programming Languages and Systems (TOPLAS), v.27 n.5, p.857-881, September 2005[doi>10.1145/1086642.1086644]
Hyeonseung Im , Keiko Nakata , Jacques Garrigue , Sungwoo Park, A syntactic type system for recursive modules, Proceedings of the 2011 ACM international conference on Object oriented programming systems languages and applications, October 22-27, 2011, Portland, Oregon, USA[doi>10.1145/2048066.2048141]
Mark P. Jones, Using parameterized signatures to express modular structure, Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.68-78, January 21-24, 1996, St. Petersburg Beach, Florida, USA[doi>10.1145/237721.237731]
Xavier Leroy, Manifest types, modules, and separate compilation, Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.109-122, January 16-19, 1994, Portland, Oregon, USA[doi>10.1145/174675.176926]
Xavier Leroy, Applicative functors and fully transparent higher-order modules, Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.142-153, January 23-25, 1995, San Francisco, California, USA[doi>10.1145/199448.199476]
Xavier Leroy, A modular module system, Journal of Functional Programming, v.10 n.3, p.269-303, May 2000[doi>10.1017/S0956796800003683]
Leroy, X. 2003. A proposal for recursive modules in Objective Caml. http://caml.inria.fr/pub/papers/xleroy-recursive_modules-03.pdf.
David MacQueen, Modules for standard ML, Proceedings of the 1984 ACM Symposium on LISP and functional programming, p.198-207, August 06-08, 1984, Austin, Texas, USA[doi>10.1145/800055.802036]
Karl Mazurak , Jianzhou Zhao , Steve Zdancewic, Lightweight linear types in system f°, Proceedings of the 5th ACM SIGPLAN workshop on Types in language design and implementation, January 23-23, 2010, Madrid, Spain[doi>10.1145/1708016.1708027]
Robin Milner , Mads Tofte , David Macqueen, The  Definition of Standard ML, MIT Press, Cambridge, MA, 1997
Benoît Montagu , Didier Rémy, Modeling abstract types in modules with open existential types, Proceedings of the 36th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages, January 21-23, 2009, Savannah, GA, USA[doi>10.1145/1480881.1480926]
David A. Moon, Object-oriented programming with flavors, Conference proceedings on Object-oriented programming systems, languages and applications, p.1-8, September 29-October 02, 1986, Portland, Oregon, USA[doi>10.1145/28697.28698]
Keiko Nakata , Jacques Garrigue, Recursive modules for programming, Proceedings of the eleventh ACM SIGPLAN international conference on Functional programming, September 16-21, 2006, Portland, Oregon, USA[doi>10.1145/1159803.1159813]
Georg Neis , Derek Dreyer , Andreas Rossberg, Non-parametric parametricity, Journal of Functional Programming, v.21 n.4-5, p.497-562, September 2011[doi>10.1017/S0956796811000165]
Nathaniel Nystrom , Stephen Chong , Andrew C. Myers, Scalable extensibility via nested inheritance, Proceedings of the 19th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications, October 24-28, 2004, Vancouver, BC, Canada[doi>10.1145/1028976.1028986]
Nathaniel Nystrom , Xin Qi , Andrew C. Myers, J&: nested intersection for scalable software composition, Proceedings of the 21st annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications, October 22-26, 2006, Portland, Oregon, USA[doi>10.1145/1167473.1167476]
Martin Odersky , Matthias Zenger, Scalable component abstractions, Proceedings of the 20th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications, October 16-20, 2005, San Diego, CA, USA[doi>10.1145/1094811.1094815]
Odersky, M., Cremet, V., Röckl, C., and Zenger, M. 2003. A nominal theory of objects with dependent types. InProceedings of the European Conference on Object-Oriented Programming (ECOOP’03). ACM Press, New York.
Scott Owens , Matthew Flatt, From structures and functors to modules and units, Proceedings of the eleventh ACM SIGPLAN international conference on Functional programming, September 16-21, 2006, Portland, Oregon, USA[doi>10.1145/1159803.1159815]
Peyton Jones, S. S., Augustsson, L., Barton, D., Boutel, B., Burton, W., Fasel, J., et al. 2003. Haskell 98 language and libraries: The revised report.J. Funct. Program. 13, 1, i--255.
Norman Ramsey , Kathleen Fisher , Paul Govereau, An expressive language of signatures, Proceedings of the tenth ACM SIGPLAN international conference on Functional programming, September 26-28, 2005, Tallinn, Estonia[doi>10.1145/1086365.1086371]
Andreas Rossberg, Generativity and dynamic opacity for abstract types, Proceedings of the 5th ACM SIGPLAN international conference on Principles and practice of declaritive programming, p.241-252, August 27-29, 2003, Uppsala, Sweden[doi>10.1145/888251.888274]
Andreas Rossberg, The missing link: dynamic components for ML, Proceedings of the eleventh ACM SIGPLAN international conference on Functional programming, September 16-21, 2006, Portland, Oregon, USA[doi>10.1145/1159803.1159816]
Rossberg, A. and Dreyer, D. 2008. MixML (project website). http://www.mpi-sws.mpg.de/~rossberg/mixml/.
Andreas Rossberg , Claudio V. Russo , Derek Dreyer, F-ing modules, Proceedings of the 5th ACM SIGPLAN workshop on Types in language design and implementation, January 23-23, 2010, Madrid, Spain[doi>10.1145/1708016.1708028]
Russo, C. V. 1998. Types for modules. Ph.D. thesis, University of Edinburgh.
Russo, C. V. 1999a. First-class structures for Standard ML. InProceedings of the International Conference on Functional Programming (ICFP’99). ACM Press, New York.
Claudio V. Russo, Non-dependent Types for Standard ML Modules, Proceedings of the International Conference PPDP'99 on Principles and Practice of Declarative Programming, p.80-97, September 29-October 01, 1999
Claudio V. Russo, Recursive structures for standard ML, Proceedings of the sixth ACM SIGPLAN international conference on Functional programming, September 03-05, 2001, Florence, Italy[doi>10.1145/507635.507644]
Christopher A. Stone , Robert Harper, Extensional equivalence and singleton types, ACM Transactions on Computational Logic (TOCL), v.7 n.4, p.676-722, October 2006[doi>10.1145/1183278.1183281]
Wadler, P. 1990. Linear types can change the world! InProgramming Concepts and Methods, M. Broy and C. Jones Eds., North Holland.
P. Wadler , S. Blott, How to make ad-hoc polymorphism less ad hoc, Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.60-76, January 11-13, 1989, Austin, Texas, USA[doi>10.1145/75277.75283]
Walker, D. 2005. Substructural type systems. InAdvanced Topics in Types and Programming Languages, B. C. Pierce Ed., MIT Press, Cambridge, MA.
