Becoming a quality software developer requires practice under the guidance of an expert mentor. Unfortunately, in most academic environments, there are not enough experts to provide any significant design mentoring for software engineering students. To address this problem, we present a collaborative software design tool intended to maximize an instructor's ability to mentor a group of students. Students use the system to create software designs for a given set of requirements. While they work, students receive automated feedback regarding common design mistakes. The system then provides support and guidance for students to manually critique each other's work. Students can view and learn from the design approaches taken by other students, as well as the critiques associated with them. We have tried this approach in software engineering classes with some positive results. We believe that this collaborative and partially automated approach can significantly improve the quality of software design education when few mentors are available.