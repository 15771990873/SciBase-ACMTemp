Letfbe a function on a set of variablesV. For eachx&in;V, letc(x)be the cost of reading the value ofx. An algorithm for evaluatingfis a strategy for adaptively identifying and reading a set of variablesU&subseteq;Vwhose values uniquely determine the value off. We are interested in finding algorithms which minimize the cost incurred to evaluatefin the above sense. Competitive analysis is employed to measure the performance of the algorithms. We address two variants of the above problem. We consider the basic model in which the evaluation algorithm knows the costc(x), for eachx&in;V. We also study a novel model where the costs of the variables are not known in advance and somepreemptionis allowed in the reading operations. This model has applications, for example, when reading a variable coincides with obtaining the output of a job on a CPU and the cost is the CPU time.For the model where the costs of the variables are known, we present apolynomial timealgorithm with the best possible competitive ratio γcffor each functionfthat is representable by a threshold tree and for each fixed cost functionc(⋅). Remarkably, the best-known result for the same class of functions is apseudo-polynomialalgorithm with competitiveness 2 γcf. Still in the same model, we introduce the Linear Programming Approach (LPA), a framework that allows the design of efficient algorithms for evaluating functions. We show that different implementations of this approach lead in general to the best algorithms known so far—and in many cases to optimal algorithms—for different classes of functions considered before in the literature.Via theLPA, we are able to determine exactly the optimal extremal competitiveness of monotone Boolean functions. Remarkably, the upper bound which leads to this result, holds for a much broader class of functions, which also includes the whole set of Boolean functions.We also show how to extend theLPA(together with these results) to the model where the costs of the variables are not known beforehand. In particular, we show how to employ the extendedLPAto design a polynomial-time optimal (with respect to competitiveness) algorithm for the class of monotone Boolean functions representable by threshold trees.