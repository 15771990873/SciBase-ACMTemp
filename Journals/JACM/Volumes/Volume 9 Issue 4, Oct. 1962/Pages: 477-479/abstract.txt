Backus [1] has developed an elegant method of defining well-formed formulas for computer languages such as ALGOL. It consists of (our notation is slightly different from that of Backus):A finite alphabet:a1,a2, …,at;Predicates:P1,P2, …,P@@@@;Productions, either of the form (a)aj∈Pi; or of the form (b)Pi2Pi1…Pit→Pj.Awordis a finite sequence of letters from the alphabet. Then IIIa states that certain words (containing only one letter) belong initially to some of the predicates, and IIIb states that if wordsW1,W2, …,Wtbelong to the predicatesPi1,Pi2, …,Pitrespectively, then the concatenationW1W2…Wtbelongs toPj. We call this aBackussystem.A simple example of such a system is: Alphabet:a,b; Predicates:P,Q,R; Productions:a∈P,b∈Q,PQ→R,QP→R;RR→R,PRQ→R,QRP→R. ThenPandQcontain only the wordsaandb, respectively, whileRcontains all words which have the same number ofa's andb's.In the above example,ababbelongs toRand can be produced in two ways. Namely, asab∈RandRR→R,abab∈R; also asba∈RandPRQ→R,abab∈R. We call a Backus systemambiguousif one of its predicates contains a word which can be produced in more than one way. As, in practice, the meaning of a word is determined by the way it is produced, an ambiguous Backus System must be avoided.As the following example illustrates, ALGOL 60 [3] is ambiguous: ifB∧Cthen forI: = 1 step 1 untilNdo ifD∨EthenA[I] : = 0 elseK: =K+ 1;K: =K- 1 In fact, both forI:= 1 step 1 untilNdo ifD∨EthenA[I] := 0 and forI:= 1 step 1 untilNdo ifD∨EthenA[I] := 0 elseK:=K+ 1 are valid for statements of ALGOL 60. Combining the first with ifB∧Cthen … elseK=K+ 1; or the second with ifB∧Cthen … gives rise to the above example, and these two methods of construction correspond to the two possible meanings of the example.D. Dahm and H. Trotter, in a private communication, have raised the question: “Does there exist an algorithm to determine whether a Backus system is ambiguous?” We call this theambiguity problem. The purpose of this paper is to show that no such algorithm exist, i.e., that the ambiguity problem is unsolvable.We first define anormal system. It consists of:A finite alphabet:a1,a2, …,at;A finite collection of ordered pairs: (g1,g1), (g2,g2), …, (gr,gr), where thegiandgiare words.An axiomAwhich is some fixed word.IfUandVare words, we sayU→VifUis of the formgPandVis of the formPgwhere (g,g) is one of the ordered pairs. We also write, in this case,giP→Pgi. Also, ifU1,U2, …,Unare words withUi→Ui+1, 1 &lE;i&lE;n-1, thenU1→Un, and we sayUnis derived fromU1. The words which may be derived from the axiomAare calledtheorems.A normal system is calledundecidableif there does not exist an algorithm for determining whether a word is a theorem of the system. It is implicit in [2, sec. 6.5] that there exists an undecidable normal system, which we denote byNS, with the property that in each ordered pair (g, g), the wordsgandghave no common letters.LEMMA.If U and V are words of NS, then U → V, if and only if there exists indices j1,j2, …,jmsuch thatUgj1gj2…gjm=gj1gj2…gjmV.PROOF. Suppose the equality holds. Asgj1andgj1have no common letters,Uis of the formgj1R1; letU1=R1gj1. Then we haveU→U1andU1gj2…gjm=gj2gj3…gjmV.Proceeding inductively, we obtain a sequence of words,U,U1,U2, …,Um=VwithU→U1→ … →Um; henceU→V. Conversely, ifU→V, then there exist wordsU0,U1, …,Um