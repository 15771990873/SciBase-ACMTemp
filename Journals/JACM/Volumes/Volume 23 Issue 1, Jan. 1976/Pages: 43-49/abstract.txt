Graph coloring problems, in which one would like to color the vertices of a given graph with a small number of colors so that no two adjacent vertices receive the same color, arise in many applications, including various scheduling and partitioning problems. In this paper the complexity and performance of algorithms which construct such colorings are investigated. For a graphG, let &khgr;(G) denote the minimum possible number of colors required to colorGand, for any graph coloring algorithmA, letA(G) denote the number of colors used byAwhen applied toG. Since the graph coloring problem is known to be “NP-complete,” it is considered unlikely that any efficient algorithm can guaranteeA(G) = &khgr;(G) for all input graphs. In this paper it is proved that even coming close to khgr;(G) with a fast algorithm is hard. Specifically, it is shown that if for some constantr< 2 and constantdthere exists a polynomial-time algorithmAwhich guaranteesA(G) ≤r·&khgr;(G) +d, then there also exists a polynomial-time algorithmAwhich guaranteesA(G) = &khgr;(G).