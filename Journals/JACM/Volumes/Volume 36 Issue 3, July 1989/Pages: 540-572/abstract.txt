The (component)merging problemis a new graph problem. Versions of this problem appear as bottlenecks in various graph algorithms. A new data structure solves this problem efficiently, and two special cases of the problem have even more efficient solutions based on other data structures. The performance of the data structures is sped up by introducing a new algorithmic tool calledpackets.The algorithms that use these solutions to the component merging problem also exploit new properties of two existing data structures. Specifically, &Bgr;-trees can be used simultaneously as a priority queue and a concatenable queue. Similarly, F-heaps support some kinds of split operations with no loss of efficiency.An immediate application of the solution to the simplest version of the merging problem is an &Ogr;(t(m,n)) algorithm for finding minimum spanning trees in undirected graphswithoutusing F-heaps, wheret(m,n) =mlog2log2logdn, the graph hasnvertices andmedges, andd= max(m/n, 2). Packets also improve the F-heap minimum spanning tree algorithm, giving the fastest algorithm currently known for this problem.The efficient solutions to the merging problem and the new observation about F-heaps lead to an &Ogr;(n(t(m,n) +nlogn)) algorithm for finding a maximum weighted matching in general graphs. This settles an open problem posed by Tarjan [ 15, p. 123], where the weaker bound ofO(nmlog (n2/m)) was conjectured.