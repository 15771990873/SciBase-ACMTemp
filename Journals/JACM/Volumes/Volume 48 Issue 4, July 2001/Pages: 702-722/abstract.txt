We describe efficient techniques for a number of parties to jointly generate an RSA key. At the end of the protocol an RSA modulusN=pqis publicly known. None of the parties know the factorization ofN. In addition a public encryption exponent is publicly known and each party holds a share of the private exponent that enables threshold decryption. Our protocols are efficient in computation and communication. All results are presented in thehonest but curiousscenario (passive adversary).