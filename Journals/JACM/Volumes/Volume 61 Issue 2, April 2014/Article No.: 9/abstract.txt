The inverted index is the backbone of modern web search engines. For each word in a collection of web documents, the index records the list of documents where this word occurs. Given a set of query words, the job of a search engine is to output a ranked list of the most relevant documents containing the query. However, if the query consists of an arbitrary string—which can be a partial word, multiword phrase, or more generally any sequence of characters—then word boundaries are no longer relevant and we need a different approach. In string retrieval settings, we are given a setD&equals;&lcub;d1,d2,d3, &mldr;,dD&rcub; ofDstrings withncharacters in total taken from an alphabet set Σ = &lsqb;σ&rsqb;, and the task of the search engine, for a given query patternPof lengthp, is to report the “most relevant” strings inDcontainingP. The query may also consist of two or more patterns. The notion of relevance can be captured by a functionscore(P,dr), which indicates how relevant documentdris to the patternP. Some example score functions are thefrequencyof pattern occurrences,proximitybetween pattern occurrences, or pattern-independentPageRankof the document.The first formal framework to study such kinds of retrieval problems was given by Muthukrishnan &lsqb;SODA 2002&rsqb;. He considered two metrics for relevance: frequency and proximity. He took a threshold-based approach on these metrics and gave data structures that useO(nlogn) words of space. We study this problem in a somewhat more natural top-kframework. Here,kis a part of the query, and the topkmost relevant (highest-scoring) documents are to be reported in sorted order of score. We present the first linear-space framework (i.e., usingO(n) words of space) that is capable of handling arbitrary score functions with near-optimalO(p&plus;klogk) query time. The query time can be made optimalO(p&plus;k) if sorted order is not necessary. Further, we derive compact space and succinct space indexes (for some specific score functions). This space compression comes at the cost of higher query time. At last, we extend our framework to handle the case of multiple patterns. Apart from providing a robust framework, our results also improve many earlier results in index space or query time or both.