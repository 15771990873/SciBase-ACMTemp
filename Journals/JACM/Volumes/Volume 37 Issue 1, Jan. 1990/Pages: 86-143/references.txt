John Backus, Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs, Communications of the ACM, v.21 n.8, p.613-641, Aug. 1978[doi>10.1145/359576.359579]
Corrado Böhm, Combinatory foundation of functional programming, Proceedings of the 1982 ACM symposium on LISP and functional programming, p.29-36, August 15-18, 1982, Pittsburgh, Pennsylvania, United States[doi>10.1145/800068.802132]
R. M. Burstall , D. B. MacQueen , D. T. Sannella, HOPE: An experimental applicative language, Proceedings of the 1980 ACM conference on LISP and functional programming, p.136-143, August 25-27, 1980, Stanford University, California, United States[doi>10.1145/800087.802799]
Walter Dosch , Bernhard Möller>, Busy and lazy FP with infinite objects, Proceedings of the 1984 ACM Symposium on LISP and functional programming, p.282-292, August 06-08, 1984, Austin, Texas, United States[doi>10.1145/800055.802045]
Steven Fortune , Daniel Leivant , Michael O'Donnell, The Expressiveness of Simple and Second-Order Type Structures, Journal of the ACM (JACM), v.30 n.1, p.151-185, Jan. 1983[doi>10.1145/322358.322370]
FRIEDMAN, D., AND WISE, n. Cons should not evaluate its arguments. In Proceedings of the 3rd International Colloquium on Automata, Languages, and Programming. Springer-Verlag, New York, 1976, pp. 257-284.
GOGUEN, J., MESEGUER, J., AND PLAISTED, D. Programming with parameterized abstract objects in OBJ. In Theory and Practice of Software Technology. North-Holland, Amsterdam, 1982.
Joseph Y. Halpern , John H. Williams , Edward L. Wimmers , Timothy C. Winkler, Denotational semantics and rewrite rules for FP, Proceedings of the 12th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.108-120, January 14-16, 1985, New Orleans, Louisiana, United States[doi>10.1145/318593.318623]
Peter Henderson , James H. Morris, Jr., A lazy evaluator, Proceedings of the 3rd ACM SIGACT-SIGPLAN symposium on Principles on programming languages, p.95-103, January 19-21, 1976, Atlanta, Georgia[doi>10.1145/800168.811543]
Christoph M. Hoffmann , Michael J. O`Donnell, Implementation of an interpreter for abstract equations, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.111-121, January 15-18, 1984, Salt Lake City, Utah, United States[doi>10.1145/800017.800522]
Zohar Manna , Stephen Ness , Jean Vuillemin, Inductive methods for proving properties of programs, Communications of the ACM, v.16 n.8, p.491-502, Aug. 1973[doi>10.1145/355609.362336]
MEYER, A.R. What is a model of the X-calculus? Inf. Control 52 (1982), 87-122.
NICKL, F. A denotational semantics for Backus' FP with infinite objects. Tech. Rep. Fakultiit for Mathematik und Informatik. Universitiit Passau, Passau, West Germany, 1985.
Michael J. O'Donnell, Computing in Systems Described by Equations, Springer-Verlag New York, Inc., Secaucus, NJ, 1977
PLOTKIN, G.D. LCF considered as a programming language. Theoret. Computer Sci. 5 (1977), 223-255.
PRAWITZ, n. Ideas and results in proof theory. In Proceedings of the 2nd Scandinavian Logic Symposium, J. Fenstad, ed. North-Holland, Amsterdam, 1971.
Hartley Rogers, Jr., Theory of recursive functions and effective computability, MIT Press, Cambridge, MA, 1987
SMYTH, i. B., AND PLOTKIN, G.n. The category-theoretic solution ofrecursive domain equations. SIAM J. Comput. 11, 4 (1982), 761-783.
Joseph E. Stoy, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory, MIT Press, Cambridge, MA, 1977
TAIT, W.W. Intentional interpretation of functions of finite type I. J. Symb. Logic 32 (1967), 198-212.
TMT, W. W. A realizability interpretation of the theory of species. In Logic Colloquium, R. Parikh, Ed. Springer-Verlag, New York, (1975), pp. 240-251.
TURNER, D.A. A new implementation technique for applicative languages. Softw. Prac. Exp. 9 (1979), 31-49.
WADSWORTH, C.P. The relation between computational and denotational properties of Scott's D=-models of the lambda calculus. SIAM J. Comput. 5 (1976), 488-521.
WADSWORTH, C.P. Approximate reduction and lambda calculus models. SIAM J. Comput. 7 (1978), 337-356.
John H. Williams, Formal Representations for Recursively Defined Functional Programs, Proceedings of the International Colloquium on Formalization of Programming Concepts, p.460-470, April 19-25, 1981
John H. Williams, On the Development of the Algebra of Functional Programs, ACM Transactions on Programming Languages and Systems (TOPLAS), v.4 n.4, p.733-757, Oct. 1982[doi>10.1145/69622.357193]
