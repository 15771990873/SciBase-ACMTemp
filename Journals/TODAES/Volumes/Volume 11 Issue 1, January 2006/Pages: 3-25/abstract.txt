The increasing use of microprocessor cores in embedded systems as well as mobile and portable devices creates an opportunity for customizing the cache subsystem for improved performance. In traditional cache design, the index portion of the memory address bus consists of theKleast significant bits, whereK&equals; log2DandDis the depth of the cache. However, in devices where the application set is known and characterized (e.g., systems that execute a fixed application set) there is an opportunity to improve cache performance by choosing a near-optimal set of bits used as index into the cache. This technique does not add any overhead in terms of area or delay. In this article, we present an efficient heuristic algorithm for selectingKindex bits for improved cache performance. We show the feasibility of our algorithm by applying it to a large number of embedded system applications as well as the integer SPEC CPU 2000 benchmarks. Specifically, for data traces, we show up to 45&percnt; reduction in cache misses. Likewise, for instruction traces, we show up to 31&percnt; reduction in cache misses. When a unified data/instruction cache architecture is considered, our results show an average improvement of 14.5&percnt; for the Powerstone benchmarks and an average improvement of 15.2&percnt; for the SPEC'00 benchmarks.