This article presents anO(n)-time algorithm called SACA-K for sorting the suffixes of an input stringT[0,n-1] over an alphabetA[0,K-1]. The problem of sorting the suffixes ofTis also known as constructing the suffix array (SA) forT. The theoretical memory usage of SACA-K isnlogK&plus;nlogn&plus;Klognbits. Moreover, we also have a practical implementation for SACA-K that usesnbytes &plus; (n&plus; 256) words and is suitable for strings over any alphabet up to full ASCII, where a word is lognbits. In our experiment, SACA-K outperforms SA-IS that was previously the most time- and space-efficient linear-time SA construction algorithm (SACA). SACA-K is around 33&percnt; faster and uses a smaller deterministic workspace ofKwords, where the workspace is the space needed beyond the input string and the output SA. GivenK=O(1), SACA-K runs in linear time andO(1) workspace. To the best of our knowledge, such a result is the first reported in the literature with a practical source code publicly available.