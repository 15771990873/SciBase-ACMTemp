Software configuration management (SCM) suffers from tight coupling between SCM version-ing models and the imposed SCM processes. In order to adapt SCM tools to SCM processes, rather than vice versa, we propose a unified versioning model, theversion set model. Version sets denote versions, components, and configurations byfeature terms, that is, Boolean terms over (feature : value)-attributions. Throughfeature logic, we deduce consistency of abstract configurations as well as features of derived components and describe how features propagate in the SCM process; usingfeature implications, we integrate change-oriented and version-oriented SCM models. We have implemented the version set model in an SCM system called ICE, forIncremental Configuration Environment. ICE is based on afeatured file system  (FFS), where version sets are accessed as virtual files and directories. Using the well-known C preprocessor (CPP) representation, users can view and edit multiple versions simultaneously, while only the differences between versions are stored. It turns out that all major SCM models can be realized and integrated efficiently on top of the FFS, demonstrating the flexible and unifying nature of the version set model.