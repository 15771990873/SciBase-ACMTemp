Program slicing is an effective techniqe for narrowing the focus of attention to the relevant parts of a program during the debugging process.  However, imprecision is a problem in static slices, since they are based on all possible executions that reach a given program point rather than the specific execution under which the program is being debugged.  Dynamic slices, based on the specific execution being debugged, are precise but incur high run-time overhead due to the tracing information that is collected during the program's execution.  We present a hybrid slicing technique that integrates dynamic information from a specific execution into a static slice analysis.  Thehybrid sliceproduced is more precise that the static slice and less costly that the dynamic slice.  The technique exploits dynamic information that is readily available during debuggingâ€”namely, breakpoint information and the dynamic call graph.  This information is integrated into a static slicing analysis to more accurately estimate the potential paths taken by the program.  The breakpoints and call/return points, used as reference points, divide the execution path into intervals.  By associating each statement in the slice with an execution interval, hybrid slicing provides information as to when a statement was encountered during execution.  Another attractive feature of our approach is that it allows the user to control the cost of hybrid slicing by limiting the amount of dynamic information used in computing the slice.  We implemented the hybrid slicing technique to demonstrate the feasibility of our approach.