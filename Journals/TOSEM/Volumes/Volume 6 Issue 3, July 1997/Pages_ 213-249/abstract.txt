As software systems become more complex, the overall system structure—or software architecture—becomes a central design problem.  An important step toward an engineering discipline of software is a formal basis for describing and analyzing these designs. In the article we present a formal approach to one aspect of architectural design: the interactions among components. The key idea is to define architectural connectors as explicit semantic entities. These are specified as a collection of protocols that characterize each of the participant roles in an interaction and how these roles interact. We illustrate how this scheme can be used to define a variety of common architectural connectors.  We further provide a formal semantics and show how this leads to a system in  which architectural compatibility can be checked in a way analogous to type-checking in programming languages.