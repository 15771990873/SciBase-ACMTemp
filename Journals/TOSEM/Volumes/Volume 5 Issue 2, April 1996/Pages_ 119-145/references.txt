Hilde Adé , Luc De Raedt , Maurice Bruynooghe, Declarative Bias for Specific-to-General ILP Systems, Machine Learning, v.20 n.1-2, p.119-154, July/Aug. 1995[doi>10.1007/BF00993477]
BAZZlCHI, F. AND SPADAFORA, I. 1982. An automatic generator for compiler testing. IEEE Trans. Softw. Eng. 8, 4, 343-353.
F. Bergadano, Inductive Database Relations, IEEE Transactions on Knowledge and Data Engineering, v.5 n.6, p.969-972, December 1993[doi>10.1109/69.250079]
BERGADANO F. AND GUNETTI, D. 1993. An interactive system to learn functional logic programs. In Proceedings of the 13th International Joint Conference on Artificial Intelligence (Chamb~ry, France), R. Bajcsy, Ed. Morgan-Kaufmann, San MateD, Calif., 1044-1049.
BERGADANO F. AND GUNETTI, D. 1994a. Intensional theory revision. In Proceedings of the ECML.94 Workshop on Theory Revision, S. Wrobel, Ed. Univ. of Catania, Catania, Italy.
BERGADANO, F. AND GUNETTI, D. 1994b. Learning clauses by tracing derivations. In Proceedings of the 4th International Workshop on Inductive Logic Programming (Bonn, Germany).
BERGADANO F. AND GUNETTI, D. 1995. PARFILP: A parallel implementation of an ILP system. Tech. Rep. 95.12.15, CS Dept., Univ. of Torino, Torino, Italy.
Francesco Bergadano , Daniele Gunetti, Inductive Logic Programming: From Machine Learning to Software Engineering, MIT Press, Cambridge, MA, 1995
Francesco Bergadano , Attilio Giordana , Lorenza Saitta, Automated Concept Acquisition in Noisy Environments, IEEE Transactions on Pattern Analysis and Machine Intelligence, v.10 n.4, p.555-578, July 1988[doi>10.1109/34.3917]
BERGADANO F., GUNETTI, D., NICOSIA, M., AND RUFFO, G. 1995. Learning logic programs with negation as failure. In Proceedings of the 5th International Workshop on Inductive Logic Programming (Leuven, Belgium). Katholieke Universiteit, Leuven, Belgium.
F. Bergadano , S. Matwin , R. S. Michalski , J. Zhang, Learning Two-Tiered Descriptions of Flexible Concepts: The POSEIDON System, Machine Learning, v.8 n.1, p.5-43, Jan. 1992[doi>10.1023/A:1022682318197]
BUDD, T. A. AND ANGLUIN, D. 1982. Two notions of correctness and their relation to testing. Acta lnformatica 18, 31-45.
J. C. Cherniavsky , C. H. Smith, A Recursion Theoretic Approach to Program Testing, IEEE Transactions on Software Engineering, v.13 n.7, p.777-784, July 1987[doi>10.1109/TSE.1987.233489]
CHOQUET, N. 1986. Test data generation using Prolog with constraints. In Proceedings of the Workshop on Software Testing. ACM, New York, 132-141.
CLARKE, L. A., HASSELL, J., AND RICHARDSON, D.J. 1982. A close look at domain testing. IEEE Trans. Softw. Eng. 8, 4, 380-390.
R. A. DeMillo, Completely validated software: test adequacy and program mutation (panel session), Proceedings of the 11th international conference on Software engineering, p.355-356, May 1989, Pittsburgh, Pennsylvania, USA[doi>10.1145/74587.74634]
Richard A. DeMillo , A. Jefferson Offutt, Constraint-Based Automatic Test Data Generation, IEEE Transactions on Software Engineering, v.17 n.9, p.900-910, September 1991[doi>10.1109/32.92910]
DEMILLO, R. A., LIPTON, R. J., AND S^YWARD, F.G. 1978. Hints on test data selection: Help for the practicing programmer. IEEE Comput. 11, 4 (Apr.), 34-41.
Richard Denney, Test-Case Generation from Prolog-Based Specifications, IEEE Software, v.8 n.2, p.49-57, March 1991[doi>10.1109/52.73749]
Luc de Raedt , Gunther Sablon , Maurice Bruynooghe, Using interactive concept learning for knowledge-base validation and verification, Validation, verification and test of knowledge-based systems, John Wiley & Sons, Inc., New York, NY, 1991
GOLD, E.M. 1967. Language identification in the limit, lnf Contr. I0, 5, 447-474.
Michael M. Gorlick , Carl F. Kesselman , Daniel A. Marotta , D. Scott Parker, Mockingbird: a logical methodology for testing, Journal of Logic Programming, v.8 n.1-2, p.95-119, Jan./Mar. 1990[doi>10.1016/0743-1066(90)90053-8]
HAMI.ET, R. G, 1981. Reliability theory of program testing. Acta Informatica 16, 1. 31-43.
I J Hayes, Specification directed module testing, IEEE Transactions on Software Engineering, v.12 n.1, p.124-133, January 1986[doi>10.1109/TSE.1986.6312926]
Daniel M. Hoffman , Paul Strooper, Automated Module Testing in Prolog, IEEE Transactions on Software Engineering, v.17 n.9, p.934-943, September 1991[doi>10.1109/32.92913]
HOWDEN. W.E. 1976. Reliability of the path analysis testing strategy. IEEE Trans. Softw. Eng. 2, 3, 208-215.
HOWDEN, W.E. 1980. Functional program testing. IEEE Trans. Softw. Eng. 6, 2, 162-169.
HOWDEN, W. E. 1982. Weak mutation testing and completeness of test sets. IEEE Trans. Softw. Eng. 8, 4, 371-379.
P. Kilperäinen , H. Mannila, Generation of test cases for simple Prolog programs, Acta Cybernetica, v.9 n.3, p.235-246, Nov. 1990
K. N. King , A. Jefferson Offutt, A Fortran language system for mutation-based software testing, Software—Practice & Experience, v.21 n.7, p.685-718, June 1991[doi>10.1002/spe.4380210704]
KIRSCHENBAUM, M. AND STERLING, L. 1991. Refinement strategies for inductive learning of simple Prolog programs. In Proceedings of the International Joint Conference on Artificial Intelligence, J. Mylopoulos and R. Reiter, Eds. Morgan Kaufmann, San Mateo, Calif., 757-761.
Donald E. Knuth, The art of computer programming,  volume 3: (2nd ed.) sorting and searching, Addison Wesley Longman Publishing Co., Inc., Redwood City, CA, 1998
MICHALSI<I, R.S. 1980. Pattern recognition as rule-guided inductive inference. IEEE Trans. Part. Anal. Mach. IntelL 2, 349-361.
MICHALSKI, R.S. 1983. A theory and methodology of inductive learning. Artif lntell. 20, 2, 111--161.
MOREI.I. L. J. 1988. Theoretical insights into fault-based testing. In Proceedings of the W, rkshop on Software Testing, Verification and Analysis. ACM, New York, 45-62.
MUGGLETON, S., Ed. 1991. Inductive Logic Programming. Academic Press, New York.
NEDDLEC, C. ^ND ROYVEmOL, C. 1994. Specifications of the Haiku system. Tech. Rep. D.LRI.2b, LRI, Uniw~rsite de Paris-Sud, Paris, France.
A. Offutt, The coupling effect: fact or fiction, Proceedings of the ACM SIGSOFT '89 third symposium on Software testing, analysis, and verification, p.131-140, December 13-15, 1989, Key West, Florida, USA[doi>10.1145/75308.75324]
Pat Langley, Editorial: Advice toMachine Learning Authors, Machine Learning, v.5 n.3, p.233-237, Aug. 1990[doi>10.1023/A:1022647305786]
STROOPER, P. AND HOFrM^N, D. 1991. Prolog testing of C modules. In Proceedings of the International Symposium on Logic Programming, V. Saraswat and K. Ueda, Eds. MIT Press, Cambridge, Mass., 596-608.
Phillip D. Summers, A Methodology for LISP Program Construction from Examples, Journal of the ACM (JACM), v.24 n.1, p.161-175, Jan. 1977[doi>10.1145/321992.322002]
W. T. Tsai , Dmitry Volovik , Thomas F. Keefe, Automated Test Case Generation for Programs Specified by Relational Algebra Queries, IEEE Transactions on Software Engineering, v.16 n.3, p.316-324, March 1990[doi>10.1109/32.48939]
Paul E. Utgoff, Machine learning of inductive bias, Kluwer, B.V., Deventer, The Netherlands, 1986
L. G. Valiant, A theory of the learnable, Communications of the ACM, v.27 n.11, p.1134-1142, Nov. 1984[doi>10.1145/1968.1972]
Elaine J. Weyuker, Assessing Test Data Adequacy through Program Inference, ACM Transactions on Programming Languages and Systems (TOPLAS), v.5 n.4, p.641-655, Oct. 1983[doi>10.1145/69575.357231]
Stefan Wrobel, Concept Formation and Knowledge Revision, Kluwer Academic Publishers, Norwell, MA, 1994
