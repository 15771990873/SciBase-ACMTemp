Bugs in programs are often introduced when programs evolve from a stable version to a new version. In this article, we propose a new approach calledDARWINfor automatically finding potential root causes of such bugs. Given two programs—a reference program and a modified program—and an input that fails on the modified program, our approach uses symbolic execution to automatically synthesize a new input that (a) is very similar to the failing input and (b) does not fail. We find the potential cause(s) of failure by comparing control-flow behavior of the passing and failing inputs and identifying code fragments where the control flows diverge.A notable feature of our approach is that it handles hard-to-explain bugs, like code missing errors, by pointing to code in the reference program. We have implemented this approach and conducted experiments using several real-world applications, such as the Apache Web server, libPNG (a library for manipulating PNG images), and TCPflow (a program for displaying data sent through TCP connections). In each of these applications,DARWINwas able to localize bugs with high accuracy. Even though these applications contain several thousands of lines of code,DARWINcould usually narrow down the potential root cause(s) to less than ten lines. In addition, we find that the inputs synthesized byDARWINprovide additional value by revealing other undiscovered errors.